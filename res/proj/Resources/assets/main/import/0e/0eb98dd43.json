[1,["41089c88-9060-4395-a959-321f2b5aa96f@6c48a","d1346436-ac96-4271-b863-1f4fdead95b0","db177b3a-8c75-4fc7-8f60-d6edc3efd24a","a01bd6de-537f-46e2-b381-4e133073b368@ad41d","323e004f-ab7a-4891-9f9b-ceb17685aa81","19761300-a118-4a2a-b42a-a816435c51ce@6c48a","73bba259-4391-4643-8c51-ba9e48c517bc","1263d74c-8167-4928-91a6-4e2672411f47@fc873","36487bbd-7df4-45a8-951b-92dd9faa9300@6c48a","55e55349-c5dc-4282-a5ec-f5894161ecdb@6c48a","6b683ce5-ebc2-47f1-97de-0d67b253efc8@6c48a","0213bb46-1ffe-4926-8f5d-d1d121cb1395","defb84b0-9435-450f-9dfc-778bb908914a@6c48a","a7612b54-35e3-4238-a1a9-4a7b54635839","1baf0fc9-befa-459c-8bdd-af1a450a0319","19c42cb0-b15e-4fb4-8da1-ae7772ecf732@6c48a","0fa77c39-a759-40aa-972e-00f178552b58@6c48a","2961b396-3cee-45ed-9a9c-a39657e8fff4@95eda","784ea5b6-6fbf-427e-a76d-5fe3464731af@6c48a","f7db6a83-cf31-481f-9938-34d5574a4f57@6c48a","e5b6eabd-cdbd-4756-a6d0-0bcb6b7d4385@6c48a","4e540908-9de0-4083-8cf4-5e2cd36f057a@1f586","a3cd009f-0ab0-420d-9278-b9fdab939bbc","e5d34000-3a5d-480f-be9a-f472b070f764","3004862e-868e-4b34-95cb-f185d324e081@c2696","42d2b4a0-61d5-4938-876b-477a833ed0c4@6c48a","066f692b-3ae0-406c-9c64-038903055c39","a01bd6de-537f-46e2-b381-4e133073b368@3dd0b","a01bd6de-537f-46e2-b381-4e133073b368@386f1","577ba711-4277-4fa1-9935-9bd388bee0f4","1263d74c-8167-4928-91a6-4e2672411f47@2e76e","f3cf95ec-8b77-4444-b8f2-2354fb405332","fae9ccc2-b46e-4f64-84fe-6890210621f8","fa4a0807-8607-419f-b46b-baa0c8410fd9","1261b077-dabd-4b38-a9e8-9b66d7fee66d","b5e6c317-5fd9-42f6-a3e0-eeffd5307cdd","28eca426-162c-4468-9977-c8fccf1c4f36","82b1cb22-2441-4318-9c38-34f7d7f790f5@792d5","d8c975b3-1b26-461c-a3a5-b5a878d5d045","ba6289bc-d60b-4795-91eb-c3e295e52df7@63569","4e540908-9de0-4083-8cf4-5e2cd36f057a@ea6e2","4e540908-9de0-4083-8cf4-5e2cd36f057a@cb203","4e540908-9de0-4083-8cf4-5e2cd36f057a@438fe","4e540908-9de0-4083-8cf4-5e2cd36f057a@ca16a","4e540908-9de0-4083-8cf4-5e2cd36f057a@bd671","4e540908-9de0-4083-8cf4-5e2cd36f057a@79e35","4e540908-9de0-4083-8cf4-5e2cd36f057a@b4251","4e540908-9de0-4083-8cf4-5e2cd36f057a@cf5ee","88a891bb-79bc-4c06-a51e-161a065618ea@6c48a","16ba72d0-092e-42e7-bc2b-d5e1b9dbce7d","2f272ccd-2936-4324-b7e2-fed9eca7a7cf","4e540908-9de0-4083-8cf4-5e2cd36f057a@e06a4","3f2984f8-8c54-49b1-8309-d3ff959dd27b","91d9dc37-0c1c-4627-8adb-c54f51f5d688@6c48a","6826b480-6300-444d-95a3-9e27a0c476a3","36dc4ba3-93f3-43b1-898b-46e9b392a617@fd7d6","36dc4ba3-93f3-43b1-898b-46e9b392a617@438fe"],["_parent","_particleSystem","_mainTexture","_mesh","node","_effectAsset","mainTexture","root","asset","data","value","targetInfo","shadeMap1","shadeMap2","_skeleton","_defaultClip","baseColorMap","specularMap","scene"],[["cc.Node",["_name","node","_enabled","__prefab","_objFlags","__editorExtras__","_id","_prefab","_parent","_lpos","_euler","_lrot","_children","_components","_lscale"],-4,4,1,5,5,5,2,9,5],["cc.ParticleSystem",["scaleSpace","startRotation3D","startSize3D","duration","_capacity","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer","bursts"],-2,1,4,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9],["cc.CurveRange",["mode","constantMax","constantMin","constant","multiplier","spline"],-2,1],["cc.Node",["_name","node","_enabled","__prefab","_prefab","_parent","_lpos","_lrot","_euler","_components","_children"],-1,4,1,5,5,5,2,12],["cc.RealKeyframeValue",["interpolationMode","value","leftTangent","rightTangent"],-1],["cc.ParticleSystem",["scaleSpace","_capacity","startRotation3D","_prewarm","startSize3D","duration","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer"],-3,1,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],["cc.GradientRange",["_mode","gradient","color","colorMin","colorMax"],2,4,5,5,5],["cc.ShapeModule",["_enable","_shapeType","alignToDirection","emitFrom","radius","radiusThickness","_arc","_angle","arcSpeed","_scale"],-5,4,5],["cc.Material",["_states","_defines","_techIdx","_name","_props"],-1,12],["cc.MeshRenderer",["_name","_shadowCastingMode","node","__prefab","_materials","lightmapSettings","_mesh"],1,1,4,3,4,6],["cc.Gradient",["colorKeys","alphaKeys"],3,9,9],["cc.SizeOvertimeModule",["_enable","separateAxes","size","x","y","z"],1,4,4,4,4],["cc.ParticleSystemRenderer",["_renderMode","_lengthScale","_mainTexture","_mesh"],1,6,6],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","removedComponents"],1,9,9],["cc.Prefab",["_name"],2],["cc.Node",["_name","node","_enabled","__prefab","_parent","_children","_prefab","_lpos","_lrot","_euler","_lscale"],-1,1,9,4,5,5,5,5],["cc.PrefabInfo",["fileId","root","asset","nestedPrefabInstanceRoots"],2,1,1,2],["cc.CurveRange",["mode","multiplier","spline"],1,4],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.ColorKey",["time","color"],2,5],["cc.VelocityOvertimeModule",["_enable","x","y","z","speedModifier"],2,4,4,4,4],["cc.LimitVelocityOvertimeModule",["dampen","limitX","limitY","limitZ","limit"],2,4,4,4,4],["cc.RotationOvertimeModule",["_enable","x","y","z"],2,4,4,4],["cc.AlphaKey",["alpha","time"],1],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.RealCurve",["preExtrapolation","_times","_values"],1,9],["cc.CompPrefabInfo",["fileId"],2],["cc.ModelLightmapSettings",[],3],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["cc.TextureAnimationModule",["frameOverTime","startFrame"],3,4,4],["cc.TrailModule",["lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],3,4,4,4,4,1],["cc.Burst",["_time","count"],2,4],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.SkeletalAnimation",["node","__prefab","_clips","_defaultClip"],3,1,4,3,6],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6],["cc.SceneAsset",["_name"],2],["cc.Scene",["_name","node","_enabled","__prefab","_children","_prefab","_globals"],-1,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog"],3,4,4,4,4],["cc.AmbientInfo",["_skyIllum","_skyColor","_groundAlbedo"],2,5,5],["cc.ShadowsInfo",["_type","_enabled","_fixedArea","_pcf","_bias","_near","_far","_shadowDistance","_invisibleOcclusionRange","_orthoSize","_saturation","_shadowColor","_size"],-8,5,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["cc.TargetInfo",["localID"],2],["cc.DirectionalLight",["_illuminance","node","_staticSettings"],2,1,4],["cc.StaticLightSettings",[],3],["cc.Camera",["_orthoHeight","_visibility","node"],1,1],["cc.EffectAsset",["_name","shaders","techniques"],0]],[[2,1],[16,0,1,2,2],[2,3,2],[0,0,1,2,3,8,12,7,9,11,10,5],[4,0,1,3,2,5],[2,0,2,1,4],[6,1],[49,0,2],[26,0,2],[4,0,1,3],[23,0,1,3],[15,0,1,2,3,4,5,6,7,8,9,5],[28,0,1,2,1],[29,0,1,1],[30,0,1,2,3,4,1],[21,1,2,3,4,1],[6,0,1,2],[20,1,2,3,4,1],[18,0,1,2],[25,0,1,2,3],[22,1,2,3,1],[43,0,1,2,3],[11,0,2,3,4,5,2],[44,0,1,2,2],[3,0,1,2,3,5,9,4,6,7,8,5],[17,0,2,2],[23,0,2],[10,1,1],[27,1],[8,0,1,4,3],[0,0,1,2,3,8,7,9,10,5],[6,2,1],[0,0,1,2,3,8,7,9,5],[19,0,1,2],[5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,2],[2,0,5,2],[0,0,1,2,3,12,7,9,11,10,5],[9,2,3,4,5,6,1],[0,0,1,2,3,8,7,9,11,14,10,5],[7,3,8,2],[12,2,1],[12,0,3,2,2],[32,0,1,2,3],[0,0,1,2,3,8,13,7,5],[7,0,1,8,9,3],[0,0,1,2,3,8,12,7,5],[3,0,1,2,3,5,9,4,6,5],[19,1,1],[7,0,1,2,8,9,4],[12,0,1,2,3],[0,4,5,8,7,3],[24,0,1,2,3,2],[10,0,1],[22,0,1,2,3,2],[3,0,1,2,3,5,10,4,6,7,8,5],[4,0,2,3],[8,2,0,1,4,4],[14,0,2],[0,0,1,2,3,8,7,9,11,10,5],[6,0,3,4,2],[18,1,1],[11,2,3,4,5,1],[11,0,1,2,3,4,5,3],[13,0,1,2,3],[45,0,1,2,2],[46,0,1,2,2],[0,0,1,2,3,12,7,5],[0,0,1,2,3,8,13,7,9,11,10,5],[0,0,1,2,3,8,13,7,11,10,5],[0,0,1,2,3,6,8,13,9,11,10,6],[15,0,1,2,3,4,5,6,7,8,10,9,5],[1,0,2,1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,5],[1,0,1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,3],[20,0,1,2,3,4,2],[33,0,1,2,3,4],[34,0,1,2,3,1],[35,0,1,2,3,4,5,6,1],[8,3,0,1,4,4],[14,1],[0,0,1,2,3,8,12,7,9,5],[0,0,1,2,3,8,13,7,9,14,5],[0,0,1,2,3,8,13,7,9,11,14,10,5],[0,0,1,2,3,12,13,7,5],[0,0,1,2,3,8,12,7,11,10,5],[0,0,1,2,3,12,13,7,14,5],[0,0,1,2,3,12,7,11,10,5],[0,0,1,2,3,8,12,7,9,11,14,10,5],[3,0,1,2,3,5,9,4,7,8,5],[3,0,1,2,3,10,4,6,7,8,5],[16,0,3,2],[4,0,1,3,4],[4,0,2],[9,0,2,3,4,5,6,2],[9,1,2,3,4,5,6,2],[5,3,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,3],[5,0,4,2,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,5],[5,0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,2],[5,0,2,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,3],[1,0,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,3],[1,0,2,1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,31,21,22,23,24,25,26,27,28,29,30,5],[1,0,2,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,5],[1,0,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,2],[2,0,1,3],[2,4,2],[17,0,1,2,3],[10,0,1,1],[7,0,4,5,6,7,8,9,6],[21,0,1,2,3,4,2],[31,0,1,2],[36,0,2],[37,0,1,2,3,4,5,6,5],[38,0,1,2,3,1],[39,0,1,2,2],[40,0,1,2,3,4,5,6,7,8,9,10,11,12,12],[41,1],[42,1],[13,0,2,2],[13,0,1,2,3,3],[47,0,1,2,3],[48,0,1,2,2],[50,0,1,2,2],[51,1],[52,0,1,2,3],[53,0,1,2,4]],[[[[29,[{"priority":129,"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTiling_Offset",8,[2,1,1,0,0.02],"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[10,1]],[[[29,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{},{}],[{"USE_ALBEDO_MAP":true},{},{},{}],[[[{},"mainTexture",6,0],{},{},{}],11,0,0,0]]],0,0,[0,0],[6,5],[25,14]],[[[29,[{"priority":129,"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[15,1]],[[[57,"an"],[66,"an",null,null,null,[-2,-3,-4,-5],[1,"55NZW8yfVI8rnmACclnsfy",-1,0]],[79,"warpGate",null,null,null,1,[-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16],[1,"4fF12TGHxGxIvHPeHuS0lV",1,0],[1,16.414,1.635,-0.804]],[45,"groundLight",null,null,null,1,[-17,-18,-19,-20,-21,-22,-23,-24,-25,-26],[1,"8aE4UsonpLbqsb1BVBgZbw",1,0]],[45,"RootNode",null,null,null,1,[-27,-28,-29,-30,-31,-32,-33,-34,-35],[1,"92hyDiK31DTbObCKW94CBN",1,0]],[19,2,[0,1],[[9,2,1],[55,2,-2.31]]],[19,2,[0,1],[[4,2,0.64,0.63,2],[9,2,1]]],[45,"cloud",null,null,null,1,[-36,-37],[1,"97JJbnvqFGR49YfUbvyY0V",1,0]],[67,"an02",null,null,null,4,[[37,-38,[8,"d5YIk/WKZPa7006RHEYNVA"],[0],[28],1]],[1,"9c1QlKyeVBab/Ts+nCrR1w",1,0],[1,12.4564304351807,1.60487306118011,9.37270259857178],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[67,"an01",null,null,null,4,[[37,-39,[8,"8bDurtXvxIqaXdwiuargXU"],[2],[28],3]],[1,"5d9xYrAz1Emocc1UutzfkD",1,0],[1,-11.7054462432861,1.7716897726059,-0.860484957695007],[3,-0.5,0.5,0.5,0.5],[1,-90,90,0]],[3,"stone1",null,null,null,4,[-40],[1,"d8XuAYuvtFoZlU5a8P0ebc",1,0],[1,17.262601852417,0.422290474176407,7.17886543273926],[3,-0.5000000000000001,0.5000000000000001,0.4999999999999999,0.5000000000000002],[1,-89.99999999999999,89.99999999999999,0]],[43,"stone01",null,null,null,10,[[37,-41,[8,"efEUZacxVP/69OpX279pr9"],[4],[28],5]],[1,"2eF0LgtM9OIK802WcF49Ra",1,0]],[3,"stone2",null,null,null,4,[-42],[1,"0bP6i22BxHUJ5r4zfCjRxT",1,0],[1,12.651,0.422,12.06],[3,-0.7071067811865475,0,0,0.7071067811865477],[1,-89.99999999999999,0,0]],[43,"stone01",null,null,null,12,[[37,-43,[8,"efEUZacxVP/69OpX279pr9"],[6],[28],7]],[1,"e9ao+8pFVOoL3eqDu9++MV",1,0]],[3,"stone3",null,null,null,4,[-44],[1,"a9ebYTEilHYLBEjY2PeX0+",1,0],[1,-5.598,0.422,12.06],[3,-4.329780281177466e-17,0.7071067811865477,0.7071067811865475,4.3297802811774677e-17],[1,-89.99999999999999,180,0]],[43,"stone01",null,null,null,14,[[37,-45,[8,"efEUZacxVP/69OpX279pr9"],[8],[28],9]],[1,"6ezvxObIZCGJioz9YGuEWh",1,0]],[3,"stone4",null,null,null,4,[-46],[1,"dei1hsXHxMBIF2pJ7aEyIz",1,0],[1,-17.633,0.422,3.775],[3,0.4999999999999999,0.5000000000000001,0.5,-0.5000000000000001],[1,-89.99999999999999,270,0]],[43,"stone01",null,null,null,16,[[37,-47,[8,"efEUZacxVP/69OpX279pr9"],[10],[28],11]],[1,"34M6QMBT9IRYWS7MaIpZ2z",1,0]],[3,"stone5",null,null,null,4,[-48],[1,"f3qBzm48pCHbllyhrqbqJx",1,0],[1,-17.633,0.422,-6.403],[3,-0.7071067811865475,0,0,0.7071067811865477],[1,-89.99999999999999,0,0]],[43,"stone01",null,null,null,18,[[37,-49,[8,"efEUZacxVP/69OpX279pr9"],[12],[28],13]],[1,"9dxbSAJ1tJ9Jz/vRkmSvsH",1,0]],[3,"stone6",null,null,null,4,[-50],[1,"06EwuWdjxNiJ24mGgYI4TN",1,0],[1,-4.631,0.422,-14.492],[3,-4.329780281177466e-17,0.7071067811865477,0.7071067811865475,4.3297802811774677e-17],[1,-89.99999999999999,180,0]],[43,"stone01",null,null,null,20,[[37,-51,[8,"efEUZacxVP/69OpX279pr9"],[14],[28],15]],[1,"4eszR2GTBIaZhqcdzh59Fw",1,0]],[3,"stone7",null,null,null,4,[-52],[1,"12ZGoSEj5Ls7ZSh+hTMfap",1,0],[1,10.204,0.422,-14.766],[3,0.4999999999999999,0.5000000000000001,0.5,-0.5000000000000001],[1,-89.99999999999999,270,0]],[43,"stone01",null,null,null,22,[[37,-53,[8,"efEUZacxVP/69OpX279pr9"],[16],[28],17]],[1,"cfOUxY0iFOk4dPWLBRa87H",1,0]],[24,"SharpCircle1",null,null,null,3,[-54],[1,"fbpGcgpU1Co6sPMdCzc1Oe",1,0],[1,-4.327,1.655,4.116],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[34,10,24,[8,"0b7a7v3FVOCpzmec7amMlB"],[18],[6],[5,3,0.03,0.06],[0],[0],[5,3,0.3,0.8],[0],[0],[0],[0],[5,3,1.2,1.5],[0],[2,10],[0],[18,true,[16,1,[52,[[47,[4,20643697]],[33,0.47098214285714285,[4,29491117]],[33,1,[4,28573628]]]]]],[44,true,0,[2,1],[1,2,1.5,0]],[22,true,[35,1,5],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-55],[40,19]],[24,"SharpCircle2",null,null,null,3,[-56],[1,"fdGOfItohOTqet4//52ERn",1,0],[1,5.093,1.655,4.061],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[34,12,26,[8,"0b7a7v3FVOCpzmec7amMlB"],[20],[6],[5,3,0.03,0.06],[0],[0],[5,3,0.3,0.8],[0],[0],[0],[0],[5,3,1.2,1.5],[0],[2,12],[0],[18,true,[16,1,[52,[[47,[4,20643697]],[33,0.47098214285714285,[4,29491117]],[33,1,[4,28573628]]]]]],[44,true,0,[2,1],[1,3,1.3,0]],[22,true,[35,1,5],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-57],[40,21]],[24,"SharpCircle3",null,null,null,3,[-58],[1,"fb0rqM0Q5LVpIkDr0R5yGP",1,0],[1,-3.986,1.655,-6.116],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[34,10,28,[8,"0b7a7v3FVOCpzmec7amMlB"],[22],[6],[5,3,0.03,0.06],[0],[0],[5,3,0.3,0.8],[0],[0],[0],[0],[5,3,1.2,1.5],[0],[2,10],[0],[18,true,[16,1,[52,[[47,[4,20643697]],[33,0.47098214285714285,[4,29491117]],[33,1,[4,28573628]]]]]],[44,true,0,[2,1],[1,2.2,0.4,0]],[22,true,[35,1,5],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-59],[40,23]],[24,"SharpCircle4",null,null,null,3,[-60],[1,"46hghm4U5JOq5W8XTERF9V",1,0],[1,3.304,1.655,-6.382],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[34,13,30,[8,"0b7a7v3FVOCpzmec7amMlB"],[24],[6],[5,3,0.03,0.06],[0],[0],[5,3,0.3,0.8],[0],[0],[0],[0],[5,3,1.2,1.5],[0],[2,13],[0],[18,true,[16,1,[52,[[47,[4,20643697]],[33,0.47098214285714285,[4,29491117]],[33,1,[4,28573628]]]]]],[44,true,0,[2,1],[1,1.7,1,0]],[22,true,[35,1,5],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-61],[40,25]],[24,"SharpCircle5",null,null,null,3,[-62],[1,"8fSVULEBNP0ILB4ZbxPxeR",1,0],[1,-10.382,1.655,-3.742],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[34,13,32,[8,"0b7a7v3FVOCpzmec7amMlB"],[26],[6],[5,3,0.03,0.06],[0],[0],[5,3,0.3,0.8],[0],[0],[0],[0],[5,3,1.2,1.5],[0],[2,13],[0],[18,true,[16,1,[52,[[47,[4,20643697]],[33,0.47098214285714285,[4,29491117]],[33,1,[4,28573628]]]]]],[44,true,0,[2,1],[1,1.7,1,0]],[22,true,[35,1,5],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-63],[40,27]],[24,"falloffLightbeam1",null,null,null,3,[-64],[1,"80xI39mXVHmIrVBpI2BCff",1,0],[1,-4.374,1.151,4.061],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[34,3,34,[8,"0b7a7v3FVOCpzmec7amMlB"],[28],[31,[4,4284935748]],[5,3,0.5,0.8],[0],[0],[2,0.01],[0],[0],[0],[0],[5,3,1.5,2],[0],[2,3],[0],[18,true,[16,1,[27,[[26,0],[10,100,0.46651785714285715],[10,0,1]]]]],[48,true,0,true,[2,1],[1,1.8,1.3,0]],[22,true,[35,1,6],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-65],[49,1,-3.5,29]],[24,"falloffLightbeam2",null,null,null,3,[-66],[1,"9cvAGcyRpHPLpnR9y2EzCi",1,0],[1,5.132,1.151,4.061],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[34,4,36,[8,"0b7a7v3FVOCpzmec7amMlB"],[30],[31,[4,4284935748]],[5,3,0.5,0.8],[0],[0],[2,0.01],[0],[0],[0],[0],[5,3,1.5,2],[0],[2,4],[0],[18,true,[16,1,[27,[[26,0],[10,100,0.46651785714285715],[10,0,1]]]]],[48,true,0,true,[2,1],[1,2.8,1.3,0]],[22,true,[35,1,6],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-67],[49,1,-3.5,31]],[24,"falloffLightbeam3",null,null,null,3,[-68],[1,"635/Dk60JL+ZVGAA2RMxRH",1,0],[1,-3.905,1.151,-6.286],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[34,3,38,[8,"0b7a7v3FVOCpzmec7amMlB"],[32],[31,[4,4284935748]],[5,3,0.5,0.8],[0],[0],[2,0.01],[0],[0],[0],[0],[5,3,1.5,2],[0],[2,3],[0],[18,true,[16,1,[27,[[26,0],[10,100,0.46651785714285715],[10,0,1]]]]],[48,true,0,true,[2,1],[1,2.3,0.4,0]],[22,true,[35,1,6],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-69],[49,1,-3.5,33]],[24,"falloffLightbeam4",null,null,null,3,[-70],[1,"d7yaZzWEhHcp7inK6CwDgL",1,0],[1,3.315,1.151,-6.456],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[34,5,40,[8,"0b7a7v3FVOCpzmec7amMlB"],[34],[31,[4,4284935748]],[5,3,0.5,0.8],[0],[0],[2,0.01],[0],[0],[0],[0],[5,3,1.5,2],[0],[2,5],[0],[18,true,[16,1,[27,[[26,0],[10,100,0.46651785714285715],[10,0,1]]]]],[48,true,0,true,[2,1],[1,1.6,0.8,0]],[22,true,[35,1,6],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-71],[49,1,-3.5,35]],[24,"falloffLightbeam5",null,null,null,3,[-72],[1,"1eZYZg+N1DG5ThiYDrMbcp",1,0],[1,-10.367,1.151,-3.723],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[34,5,42,[8,"0b7a7v3FVOCpzmec7amMlB"],[36],[31,[4,4284935748]],[5,3,0.5,0.8],[0],[0],[2,0.01],[0],[0],[0],[0],[5,3,1.5,2],[0],[2,5],[0],[18,true,[16,1,[27,[[26,0],[10,100,0.46651785714285715],[10,0,1]]]]],[48,true,0,true,[2,1],[1,1.6,0.8,0]],[22,true,[35,1,6],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-73],[49,1,-3.5,37]],[80,"Plane",null,null,null,7,[[92,"Plane<ModelComponent>",-74,[8,"e0uHCYkZ1D1I9glcT6oLf2"],[38],[28],39]],[1,"fcQ2rfowlHBr5bdl5kQAyu",1,0],[1,4.34,-5.294,-8.898],[1,12,4,6]],[24,"Particle",null,null,null,7,[-75],[1,"2eMLWMxyBPC6GGhB3unHqd",1,0],[1,-0.288,5.817,-0.391],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,0,-90,0]],[94,true,30,45,[8,"0b7a7v3FVOCpzmec7amMlB"],[40],[6],[5,3,14,10],[0],[0],[5,3,1,1.5],[0],[0],[102,3,6.283185307179586],[0],[5,3,3,4],[0],[2,10],[0],[18,true,[16,1,[27,[[26,0],[10,49,0.2924107142857143],[10,0,1]]]]],[44,true,0,[2,1],[1,25,2,30]],[61,[0],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[53,true,[0],[0],[5,3,-0.5235987755982988,0.5235987755982988]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-76],[40,41]],[46,"wind_mesh_wai",null,null,null,2,[-77],[1,"57020qexZORa22cil1IYvG",1,0],[1,0,0.145,0]],[71,0,true,true,1,47,[8,"0b7a7v3FVOCpzmec7amMlB"],[[42,null],6,0],[31,[4,4280149247]],[2,0.96],[2,0.95],[5,3,0.9,0.7],[0],[2,-1.5707963267948966],[0],[0],[0],[2,1],[0],[2,2],[0],[18,true,[16,1,[27,[[26,0],[10,120,0.484375],[10,0,1]]]]],[39,0,[2,1]],[62,true,true,[25,1,[19,2,[0,0.1,0.2,0.3,0.4,0.5,0.61,0.7,0.8,0.9,1],[[9,2,1],[9,2,0.97],[4,2,1,0.02,0.02],[4,2,0.98,0.01,0.01],[4,2,1,0.03,0.03],[4,2,0.98,0.01,0.01],[4,2,1,0.05,0.05],[4,2,0.98,0.01,0.01],[4,2,1,0.08,0.08],[4,2,0.97,-0.02,-0.02],[9,2,1]]]],[2,1],[2,1],[25,1,[19,2,[0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],[[9,2,1],[9,2,0.98],[4,2,1,0.01,0.01],[4,2,0.97,0.01,0.01],[4,2,1,0.03,0.03],[4,2,0.98,0.01,0.01],[4,2,1,0.04,0.04],[4,2,0.98,0.01,0.01],[4,2,1,0.1,0.1],[4,2,0.97,-0.02,-0.02],[9,2,1]]]]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-78],[41,4,43,44]],[46,"wind_mesh_nei",null,null,null,2,[-79],[1,"ecPh9sA91FObZ+Ln54asHr",1,0],[1,0.015,0.14,0]],[95,0,true,true,1,49,[8,"0b7a7v3FVOCpzmec7amMlB"],[45],[31,[4,4280149247]],[2,0.65],[2,0.73],[5,3,1.6,1.4],[0],[2,-1.5707963267948966],[0],[0],[0],[2,1],[0],[2,2],[0],[18,true,[16,1,[27,[[26,0],[10,120,0.484375],[10,0,1]]]]],[39,0,[2,1]],[62,true,true,[25,1,[19,2,[0,0.1,0.2,0.3,0.4,0.5,0.61,0.7,0.8,0.9,1],[[9,2,1],[9,2,0.97],[4,2,1,0.02,0.02],[4,2,0.98,0.01,0.01],[4,2,1,0.03,0.03],[4,2,0.98,0.01,0.01],[4,2,1,0.05,0.05],[4,2,0.98,0.01,0.01],[4,2,1,0.08,0.08],[4,2,0.97,-0.02,-0.02],[9,2,1]]]],[2,1],[2,1],[25,1,[19,2,[0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],[[9,2,1],[9,2,0.98],[4,2,1,0.01,0.01],[4,2,0.97,0.01,0.01],[4,2,1,0.03,0.03],[4,2,0.98,0.01,0.01],[4,2,1,0.04,0.04],[4,2,0.98,0.01,0.01],[4,2,1,0.1,0.1],[4,2,0.97,-0.02,-0.02],[9,2,1]]]]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-80],[41,4,46,47]],[87,"SharpCircle",null,null,null,2,[-81],[1,"81R5d+jF5Gp7d8qxdRW3pa",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[96,0,51,[8,"0b7a7v3FVOCpzmec7amMlB"],[48],[31,[4,4283491327]],[5,3,0.03,0.06],[0],[0],[5,3,7,4],[0],[0],[0],[0],[5,3,0.6,0.8],[0],[2,10],[0],[60,[6]],[44,true,0,[2,1],[1,1.4,1.5,0]],[22,true,[25,1,[19,2,[0,1],[[9,2,1],[55,2,-1.85]]]],[0],[0],[0]],[73,true,[0],[0],[104,1,4,[19,2,[0,1],[[90,2,0.01,1.13],[9,2,1]]]],[2,0.4]],[12,[0],[0],[2,5]],[15,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-82],[40,49]],[24,"falloffLightbeam5",null,null,null,2,[-83],[1,"36uqbs2/JJno2bVpbJzoEK",1,0],[1,-0.595,0.197,0],[3,0.7071067811865475,0,0,0.7071067811865477],[1,89.99999999999999,0,0]],[98,0,5,53,[8,"8ehvTgvt5LwYIiwwaUFIHu"],[[50,null],6,0],[59,2,[4,4284809054],[4,4279172605]],[5,3,0.4,0.3],[0],[0],[2,0.01],[0],[0],[0],[0],[5,3,1.5,2],[0],[2,3],[0],[18,true,[16,1,[27,[[26,0],[10,160,0.5],[10,0,1]]]]],[48,true,0,true,[2,1],[1,0,1.3,0]],[22,true,[25,1,[19,2,[0,1],[[4,2,0.64,0.63,2],[9,2,1]]]],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-84],[49,1,-5,51]],[46,"SharpCircle_Black",null,null,null,2,[-85],[1,"34VatBTJFGu78iUPI4bmCY",1,0],[1,1,0.918,0]],[99,0,true,true,2,55,[8,"0b7a7v3FVOCpzmec7amMlB"],[[52,null],6,0],[31,[4,4278262038]],[2,6.5],[2,6.5],[2,6.5],[0],[0],[2,1.5707963267948966],[0],[2,0.3],[2,2],[0],[2,1],[0],[[108,0.3,[2,1]]],[60,[16,1,[27,[[26,0],[10,255,0.4174107142857143],[10,0,1]]]]],[39,0,[2,1]],[61,[25,1,[19,2,[0,1],[[4,2,0.75,0.61,2],[9,2,1]]]],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[5,3,-0.5235987755982988,0.5235987755982988]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-86],[41,4,53,54]],[24,"wakka02",null,null,null,2,[-87],[1,"fcPoU08VFIv48tfDKQuLr0",1,0],[1,1.011,1.22,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[72,0,true,57,[8,"0b7a7v3FVOCpzmec7amMlB"],[[55,null],6,0],[59,2,[4,4280345855],[4,4282644306]],[5,3,6,5.9],[0],[0],[2,0.25],[0],[2,1.5707963267948966],[5,3,-3.141592653589793,3.141592653589793],[0],[5,3,2.5,3],[0],[2,9],[0],[18,true,[16,1,[27,[[26,0],[10,255,0.45],[10,0,1]]]]],[39,0,[2,1]],[22,true,[25,1,[19,2,[0,1],[[4,2,0.79,0.57,2],[9,2,1]]]],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[53,true,[0],[0],[5,3,-0.5235987755982988,0.5235987755982988]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-88],[41,4,56,57]],[46,"Ring_002",null,null,null,2,[-89],[1,"60FN76tmlAB5M9krZJkCrH",1,0],[1,0.912,0.963,0]],[100,0,true,true,5,59,[8,"0b7a7v3FVOCpzmec7amMlB"],[[58,null],6,0],[31,[4,4283367231]],[2,7.3],[2,7.5],[2,7.5],[0],[0],[2,1.5707963267948966],[0],[0],[5,3,2,1.5],[0],[2,2],[0],[18,true,[16,1,[27,[[26,0],[10,255,0.4174107142857143],[10,0,1]]]]],[39,0,[2,1]],[61,[25,1,[19,2,[0,1],[[4,2,0.75,0.61,2],[9,2,1]]]],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[20,[0],[0],[5,3,-0.5235987755982988,0.5235987755982988]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-90],[41,4,59,60]],[24,"SharpCircle_wai",null,null,null,2,[-91],[1,"f6i1lMum1Ow6/SUqy4n+hK",1,0],[1,1.173,0.7,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[101,0,61,[8,"0b7a7v3FVOCpzmec7amMlB"],[[61,null],6,0],[31,[4,4283957072]],[5,3,0.07,0.04],[0],[0],[5,3,3,2.2],[0],[0],[0],[0],[5,3,1.2,1.4],[0],[2,40],[0],[60,[6]],[106,true,2.7,0,4.71238898038469,0,[2,1],[1,0.9,1,0]],[22,true,[25,1,[19,2,[0,1],[[9,2,1],[55,2,-1.85]]]],[0],[0],[0]],[73,true,[0],[0],[103,4],[25,1,[19,2,[0,1],[[9,2,1],[55,2,-1.06]]]]],[12,[0],[0],[2,5]],[107,1,[0],[0],[0],[0]],[20,[0],[0],[0]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-92],[40,62]],[46,"wavering02_02",null,null,null,2,[-93],[1,"d4kBYc5c9M+bI8Lp0JqGep",1,0],[1,0.965,0.993,0]],[72,0,true,63,[8,"0b7a7v3FVOCpzmec7amMlB"],[[63,null],6,0],[59,2,[4,4280345855],[4,4282644306]],[5,3,6,6.1],[0],[0],[0],[0],[2,1.5707963267948966],[5,3,-3.141592653589793,3.141592653589793],[0],[5,3,2.5,3],[0],[2,1],[0],[18,true,[16,1,[27,[[26,0],[10,255,0.4174107142857143],[10,0,1]]]]],[39,0,[2,1]],[22,true,[25,1,[19,2,[0,1],[[4,2,0.81,0.86,2],[9,2,1]]]],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[53,true,[0],[0],[5,3,-0.5235987755982988,0.5235987755982988]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-94],[41,4,64,65]],[24,"storm_sharpshock01",null,null,null,2,[-95],[1,"09WxKunw9IDrB9q3W5gcRr",1,0],[1,0.349,1.075,0],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,0,-90,0]],[97,0,true,65,[8,"0b7a7v3FVOCpzmec7amMlB"],[66],[6],[5,3,6.2,6.1],[0],[0],[2,0.3],[0],[2,1.5707963267948966],[5,3,-3.141592653589793,3.141592653589793],[0],[5,3,2.5,3],[0],[2,3],[0],[18,true,[16,1,[105,[[47,[4,23854935]],[33,0.6473214285714286,[4,20965631]]],[[26,0],[10,180,0.190625],[10,0,0.375]]]]],[39,0,[2,1]],[22,true,[25,1,[19,2,[0,1],[[9,2,1],[91,2]]]],[0],[0],[0]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[53,true,[0],[0],[5,3,1.5707963267948966,0.5235987755982988]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-96],[41,4,67,68]],[46,"guangzhu",null,null,null,2,[-97],[1,"e3CVa/YZtEDYdHv06TwOTw",1,0],[1,1.173,0.893,-0.046]],[71,0,true,true,1,67,[8,"0b7a7v3FVOCpzmec7amMlB"],[[69,null],6,0],[31,[4,4280155987]],[2,4.6],[2,4.6],[2,6],[0],[0],[2,-1.5707963267948966],[0],[0],[2,1],[0],[2,2],[0],[18,true,[16,1,[27,[[26,0],[10,120,0.484375],[10,0,1]]]]],[39,0,[2,1]],[62,true,true,[25,1,[19,2,[0,0.1,0.2,0.3,0.4,0.5,0.61,0.7,0.8,0.9,1],[[9,2,1],[9,2,0.97],[4,2,1,0.02,0.02],[4,2,0.98,0.01,0.01],[4,2,1,0.03,0.03],[4,2,0.98,0.01,0.01],[4,2,1,0.05,0.05],[4,2,0.98,0.01,0.01],[4,2,1,0.08,0.08],[4,2,0.97,-0.02,-0.02],[9,2,1]]]],[2,1],[2,1],[25,1,[19,2,[0,0.09,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1],[[9,2,1],[9,2,0.88],[4,2,1,0.01,0.01],[4,2,0.88,0.01,0.01],[4,2,1,0.03,0.03],[4,2,0.9,0.01,0.01],[4,2,1,0.04,0.04],[4,2,0.9,0.01,0.01],[4,2,1,0.1,0.1],[4,2,0.88,-0.02,-0.02],[9,2,1]]]]],[17,[0],[0],[0],[2,1]],[12,[0],[0],[0]],[15,[0],[0],[0],[0]],[53,true,[0],[0],[2,0.7853981633974483]],[13,[0],[0]],[14,[2,1],[0],[6],[6],-98],[41,4,70,71]]],0,[0,7,1,0,-1,4,0,-2,3,0,-3,7,0,-4,2,0,-1,47,0,-2,49,0,-3,51,0,-4,53,0,-5,55,0,-6,57,0,-7,59,0,-8,61,0,-9,63,0,-10,65,0,-11,67,0,-1,24,0,-2,26,0,-3,28,0,-4,30,0,-5,32,0,-6,34,0,-7,36,0,-8,38,0,-9,40,0,-10,42,0,-1,8,0,-2,9,0,-3,10,0,-4,12,0,-5,14,0,-6,16,0,-7,18,0,-8,20,0,-9,22,0,-1,44,0,-2,45,0,4,8,0,4,9,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,15,0,4,15,0,-1,17,0,4,17,0,-1,19,0,4,19,0,-1,21,0,4,21,0,-1,23,0,4,23,0,-1,25,0,1,25,0,-1,27,0,1,27,0,-1,29,0,1,29,0,-1,31,0,1,31,0,-1,33,0,1,33,0,-1,35,0,1,35,0,-1,37,0,1,37,0,-1,39,0,1,39,0,-1,41,0,1,41,0,-1,43,0,1,43,0,4,44,0,-1,46,0,1,46,0,-1,48,0,1,48,0,-1,50,0,1,50,0,-1,52,0,1,52,0,-1,54,0,1,54,0,-1,56,0,1,56,0,-1,58,0,1,58,0,-1,60,0,1,60,0,-1,62,0,1,62,0,-1,64,0,1,64,0,-1,66,0,1,66,0,-1,68,0,1,68,0,9,1,98],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,3,-1,3,-1,3,-1,3,-1,3,-1,3,-1,3,-1,3,-1,3,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,2,-1,3,-1,2,-1,3,2,-1,3,2,-1,2,-1,2,-1,3,2,-1,3,2,-1,3,2,-1,2,-1,3,2,-1,3,2,-1,3,2],[26,27,2,28,2,3,2,3,2,3,2,3,2,3,2,3,2,3,4,0,4,0,4,0,4,0,4,0,6,5,6,5,6,5,6,5,6,5,29,30,31,16,11,17,10,11,17,10,4,0,6,5,32,7,0,33,7,18,34,7,15,4,0,35,7,19,36,7,20,11,37,10]],[[[29,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,2155905152],"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[20,1]],[[[42,".bin",3750399230,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":864,"length":192,"count":48,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":864,"count":18,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7479050159454346,-0.8154202103614807,0],"maxPosition",8,[1,0.7300684452056885,0.8177291750907898,0.521587610244751]]],-1],0,0,[],[],[]],[[[57,"skyBox"],[66,"skyBox",null,null,null,[-2],[1,"d79fUWNjVKoKq5Y/UXP+V9",-1,0]],[45,"RootNode",null,null,null,1,[-3],[1,"f2IxTWUotAyY/zFgDURvDD",1,0]],[81,"skyBox",null,null,null,2,[[93,1,-4,[8,"5eU+czpbdPbbBGOsGlhQVB"],[0],[28],1]],[1,"5eAMOHCf1ClZ3z+TfNRrMz",1,0],[1,0,0,0.00000556361783310422],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,2.57702493667603,2.57702493667603,2.57702493667603],[1,-90.00000000000003,0,0]]],0,[0,7,1,0,-1,2,0,-1,3,0,4,3,0,9,1,4],[0,0],[-1,3],[38,39]],[[[56,1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,2155905152],"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[0,1]],[[[74,"Skin-0",4204571687,["RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine","RootNode/Bip001/Bip001 Pelvis","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","RootNode/Bip001","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/jiantong","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bone034","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bone034/Bone035","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone013/Bone014/Bone015/Bone016/Bone017","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone010/Bone011","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone010/Bone011/Bone012","RootNode/Bip001/Bip001 Pelvis/Bone018","RootNode/Bip001/Bip001 Pelvis/Bone022","RootNode/Bip001/Bip001 Pelvis/Bone030","RootNode/Bip001/Bip001 Pelvis/Bone030/Bone031","RootNode/Bip001/Bip001 Pelvis/Bone018/Bone019","RootNode/Bip001/Bip001 Pelvis/Bone022/Bone023","RootNode/Bip001/Bip001 Pelvis/Bone022/Bone023/Bone024","RootNode/Bip001/Bip001 Pelvis/Bone022/Bone023/Bone024/Bone025","RootNode/Bip001/Bip001 Pelvis/Bone030/Bone031/Bone032","RootNode/Bip001/Bip001 Pelvis/Bone030/Bone031/Bone032/Bone033","RootNode/Bip001/Bip001 Pelvis/Bone018/Bone019/Bone020","RootNode/Bip001/Bip001 Pelvis/Bone018/Bone019/Bone020/Bone021","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone013","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone013/Bone014","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone013/Bone014/Bone015","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone013/Bone014/Bone015/Bone016","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bone036","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bone036/Bone037","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone007/Bone008","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone007/Bone008/Bone009","RootNode/Bip001/Bip001 Pelvis/Bone026","RootNode/Bip001/Bip001 Pelvis/Bone026/Bone027","RootNode/Bip001/Bip001 Pelvis/Bone026/Bone027/Bone028","RootNode/Bip001/Bip001 Pelvis/Bone026/Bone027/Bone028/Bone029","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone010","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone007","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/gongjian/Bone004/Bone005","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/gongjian/Bone004/Bone005/Bone006","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/gongjian","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/gongjian/Bone004","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/gongjian/gongjian_la","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/gongjian/Bone001/Bone002","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/gongjian/Bone001/Bone002/Bone003","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/gongjian/Bone001","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01"],[[[7,4.371138828673793e-8,-0.04899996519088745,-0.9987987875938416,0,-6.123234262925839e-17,-0.9987987875938416,0.04899996519088745,0,-1,-2.141856692006172e-9,-4.3658882731278936e-8,0,0.02790239453315735,0.00628758454695344,-0.02861582674086094,1],[7,-0.04899996519088745,4.3658882731278936e-8,-0.9987987875938416,0,-0.9987987875938416,-4.5853248309413175e-8,0.04899996519088745,0,-4.3658886283992615e-8,1,4.5853248309413175e-8,0,-0.0240061953663826,-0.00016744011372793466,-0.028615828603506088,1],[7,4.371138828673793e-8,0.04900270700454712,-0.998798668384552,0,-6.123234262925839e-17,-0.998798668384552,-0.04900270700454712,0,-1,2.1419765960928316e-9,-4.36588720731379e-8,0,0.02790239080786705,0.006287585943937302,0.0286157988011837,1],[7,-2.1068972344551185e-8,0.0000013735137827097788,-1,0,0.07253024727106094,-0.9973661303520203,-0.0000013714244460061309,0,-0.9973662495613098,-0.07253024727106094,-7.86078260262002e-8,0,0.11435721069574356,0.009685778990387917,-0.02827335149049759,1],[7,5.662467827960427e-8,0.000001372506176267052,-1,0,0.016022076830267906,-0.9998716711997986,-0.0000013714228543904028,0,-0.999871551990509,-0.016022078692913055,-7.860781892077284e-8,0,0.19997432827949524,0.003204406937584281,-0.02827335149049759,1],[7,-2.7537720370673924e-7,0.0000013661548337040585,-1,0,0.016022076830267906,-0.9998716711997986,-0.0000013703914873985923,0,-0.999871551990509,-0.016022078692913055,2.5345323706460476e-7,0,0.19997432827949524,0.003204406937584281,0.028273314237594604,1],[7,-3.5218042171436537e-7,0.0000013483971770256176,-1,0,0.07253024727106094,-0.9973661303520203,-0.0000013703896684091887,0,-0.9973662495613098,-0.07253024727106094,2.534532654863142e-7,0,0.11435721814632416,0.009685778990387917,0.028273314237594604,1],[7,4.851649038073447e-8,-0.0000014035521189725841,1,0,-0.035390108823776245,-0.9993736147880554,-0.0000014009559663463733,0,0.9993735551834106,-0.035390112549066544,-9.815796886414319e-8,0,-0.22068306803703308,0.00784805417060852,2.1767368352243466e-8,1],[7,0.0000013867999086869531,0.0000027577068522077752,1,0,6.123234262925839e-17,-1,0.0000027577068522077752,0,1,-3.8243271396898315e-12,-0.0000013868001360606286,0,-0.19999998807907104,7.648776360544285e-13,2.7736001584344194e-7,1],[7,-1.6969124772003852e-7,-0.0000014132363048702246,1,0,0.12378022819757462,-0.9923096895217896,-0.0000013813635177939432,0,0.9923096895217896,0.12378023564815521,3.433169695199467e-7,0,-0.26025575399398804,-0.03387313336133957,-9.395052558147654e-8,1],[7,0.000001370906943520822,1,-6.123234262925839e-17,0,-1,0.000001370906943520822,6.123225660247469e-17,0,6.123234262925839e-17,6.123225660247469e-17,1,0,3.173834523012422e-39,-1.2246468525851679e-17,-0.19999998807907104,1],[7,0.0000013430886838250444,-0.000001402693328600435,1,0,6.123234262925839e-17,-1,-0.000001402693328600435,0,1,1.8840029362976463e-12,-0.0000013430887975118821,0,-0.3386670649051666,0.01173066720366478,4.754638496251573e-7,1],[7,1.5596921087990268e-8,-4.0790886224328915e-9,-1,0,-0.9909771680831909,0.13403020799160004,-1.6002916325419392e-8,0,0.13403019309043884,0.9909772276878357,-1.951825590040812e-9,0,0.008639190346002579,-0.2871951758861542,-0.003302530385553837,1],[7,2.17043790939897e-7,-0.0000014199836186890025,1,0,-0.15832139551639557,-0.9873876571655273,-0.000001367711433886143,0,0.9873876571655273,-0.15832139551639557,-4.391201571252168e-7,0,-0.31962019205093384,0.06520096212625504,1.6890909648736852e-7,1],[7,-0.9485144019126892,-0.000001340687958872877,0.3167341947555542,0,-0.039456967264413834,0.9922108054161072,-0.11815639585256577,0,-0.3142669200897217,-0.12457041442394257,-0.9411262273788452,0,0.08695398271083832,0.029901066794991493,0.30090078711509705,1],[7,-0.7680574059486389,-0.05365787073969841,0.6381290555000305,0,-0.0057912832126021385,0.997024655342102,0.07686561346054077,0,-0.6403548121452332,0.05534161627292633,-0.7660828828811646,0,0.1609424501657486,-0.02717585302889347,0.26024898886680603,1],[7,-0.8849770426750183,0.4656343460083008,-2.2718134573551652e-7,0,1.4901158351676713e-7,-2.0468733907819114e-7,-1,0,-0.4656343460083008,-0.8849770426750183,1.1175872316471214e-7,0,0.11712684482336044,0.2948153018951416,0.008519081398844719,1],[7,-0.8849771618843079,0.46563422679901123,-2.2718135994637123e-7,0,1.49011640360186e-7,-2.0468732486733643e-7,-1,0,-0.46563422679901123,-0.8849771618843079,1.1175872316471214e-7,0,0.08137809485197067,0.2948153614997864,0.00851907953619957,1],[7,0.9485145211219788,-0.0000013797204019283527,0.31673386693000793,0,-0.03945436701178551,0.9922108054161072,0.1181572675704956,0,-0.3142669200897217,-0.12457041442394257,0.9411262273788452,0,0.08695398271083832,0.02990107052028179,-0.30090078711509705,1],[7,-1.5066149217091152e-7,1.614523803539214e-8,-1,0,-0.3208686411380768,-0.947123646736145,3.305101259343246e-8,0,-0.947123646736145,0.3208686411380768,1.478755820016886e-7,0,0.36576488614082336,-0.022842640057206154,-5.131156299853501e-8,1],[7,0.33654993772506714,-0.9098988771438599,0.2425248920917511,0,-0.22826533019542694,-0.32869699597358704,-0.9164352416992188,0,-0.9135802984237671,-0.25306621193885803,0.3183213770389557,0,0.3251253068447113,0.04061628133058548,-0.11394482105970383,1],[7,0.33654987812042236,-0.9098988175392151,0.2425248622894287,0,-0.22826531529426575,-0.32869696617126465,-0.9164352416992188,0,-0.9135801196098328,-0.25306615233421326,0.3183213770389557,0,0.3045700490474701,0.040616292506456375,-0.11394481360912323,1],[7,1.8933151579858531e-7,1.0000001192092896,-1.0558188279219394e-7,0,-0.3426055312156677,-3.432596074048888e-8,-0.9394791126251221,0,-0.9394791126251221,2.14046067981144e-7,0.3426055312156677,0,0.19992032647132874,-4.9508976474044175e-8,-0.10414676368236542,1],[7,-0.4520820081233978,-0.07733358442783356,-0.8886176347732544,0,0.03506617248058319,-0.9970054626464844,0.0689263716340065,0,-0.8912866711616516,-4.4703490686970326e-8,0.45343998074531555,0,0.18174073100090027,-0.006948268041014671,-0.13696520030498505,1],[7,3.160504888910509e-7,-1.0000001192092896,5.691949240826943e-7,0,0.49519801139831543,6.510127832370927e-7,0.8687801957130432,0,-0.8687801361083984,7.285735126316695e-9,0.49519801139831543,0,0.1796143651008606,-2.146151700799237e-8,-0.13923250138759613,1],[7,-4.631557999346114e-7,-1.0000001192092896,-9.592171181793674e-7,0,0.27073514461517334,-0.0000010487864301467198,0.9626539349555969,0,-0.9626538753509521,1.8616501051837986e-7,0.2707351744174957,0,0.17545928061008453,2.5911393919386683e-8,-0.099814273416996,1],[7,2.3392757952933607e-7,1.0000001192092896,-6.78395153386191e-8,0,-0.18256379663944244,-2.3992692277374772e-8,-0.9831938743591309,0,-0.9831938147544861,2.42381304360606e-7,0.18256379663944244,0,0.17451079189777374,-5.661105362264607e-8,-0.07634507119655609,1],[7,-0.29265397787094116,-0.05172043666243553,-0.9548184275627136,0,0.01515656802803278,-0.9986616969108582,0.049449775367975235,0,-0.9560981392860413,-9.75560681126808e-8,0.29304614663124084,0,0.16351790726184845,-0.005466461181640625,-0.11058032512664795,1],[7,-0.1854018121957779,-0.2753048539161682,-0.9433101415634155,0,0.053093865513801575,-0.9613572955131531,0.27013662457466125,0,-0.9812276363372803,-1.6391292945172609e-7,0.19285434484481812,0,0.1468181610107422,-0.020189611241221428,-0.09313374012708664,1],[7,-0.1854018121957779,-0.2753048539161682,-0.9433101415634155,0,0.053093865513801575,-0.9613572955131531,0.27013662457466125,0,-0.9812276363372803,-1.6391292945172609e-7,0.19285434484481812,0,0.12227239459753036,-0.020189616829156876,-0.09313375502824783,1],[7,-3.0101908521373844e-8,-1.0000001192092896,1.5552033971744095e-7,0,0.13820402324199677,1.4986775909164862e-7,0.9904037117958069,0,-0.9904035925865173,5.1306596304812047e-8,0.13820403814315796,0,0.1579490602016449,-1.244324554505738e-8,-0.07920227199792862,1],[7,-1.1752462825143084e-7,-1.0000001192092896,2.4294342892972054e-7,0,0.13820411264896393,2.2436974234096851e-7,0.9904037117958069,0,-0.9904035925865173,1.4997266362115624e-7,0.13820412755012512,0,0.13111332058906555,-2.9613735463840385e-8,-0.07920227944850922,1],[7,2.4346348936887807e-7,-1.0000001192092896,-5.571994279307546e-7,0,0.06961220502853394,-5.388997692534758e-7,0.9975741505622864,0,-0.9975740313529968,-2.816607889144507e-7,0.06961220502853394,0,0.1599186360836029,3.546780646956904e-8,0.03747048228979111,1],[7,2.4346346094716864e-7,-1.0000001192092896,-5.571993710873357e-7,0,0.06961219012737274,-5.388997692534758e-7,0.997573971748352,0,-0.997573971748352,-2.816607889144507e-7,0.06961219757795334,0,0.13732244074344635,3.458915998066914e-8,0.037470489740371704,1],[7,-3.706338702613721e-8,-1.6505818223322422e-7,-1,0,0.9934088587760925,0.11462464928627014,-5.573884109821847e-8,0,0.11462464928627014,-0.9934088587760925,1.5972190681168286e-7,0,-0.10894107818603516,0.4571993947029114,-5.188396201560863e-8,1],[7,-2.4270542553495034e-7,2.030208179348847e-8,-1,0,0.6770560145378113,-0.7359314560890198,-1.7926613793406432e-7,0,-0.735931396484375,-0.6770560145378113,1.6486893628098187e-7,0,0.2906617522239685,0.37764444947242737,-4.206705739306926e-8,1],[7,-1.390442321280716e-7,-6.022292353691228e-8,-1,0,0.18772178888320923,-0.9822222590446472,3.305065732206458e-8,0,-0.9822221398353577,-0.18772181868553162,1.4787751467792987e-7,0,0.4179098904132843,0.1852591633796692,-5.13123019629802e-8,1],[7,-1.5066149217091152e-7,1.614523803539214e-8,-1,0,-0.3208686411380768,-0.947123646736145,3.305101259343246e-8,0,-0.947123646736145,0.3208686411380768,1.478755820016886e-7,0,0.4161258637905121,-0.02284262515604496,-5.131156299853501e-8,1],[7,0.04900270700454712,-4.3658882731278936e-8,-0.998798668384552,0,-0.998798668384552,-4.5853361996250896e-8,-0.04900270700454712,0,-4.36588720731379e-8,1,-4.5853369101678254e-8,0,-0.0240061953663826,-0.00016744011372793466,0.0286157988011837,1],[7,0.7680574059486389,0.05365513637661934,0.6381292939186096,0,-0.005789177492260933,0.9970248937606812,-0.0768638625741005,0,-0.6403548121452332,0.05534161999821663,0.7660828828811646,0,0.16094247996807098,-0.02717585489153862,-0.26024895906448364,1],[7,0.8849774599075317,-0.46563413739204407,4.062573282226367e-7,0,2.086163561898502e-7,-4.7598868491149915e-7,-1.0000001192092896,0,-0.465634286403656,-0.8849772214889526,3.2410036965302425e-7,0,0.11719141900539398,0.2947813868522644,0.008519012480974197,1],[7,0.8849776387214661,-0.4656340181827545,4.062573850660556e-7,0,2.0861646987668792e-7,-4.7598868491149915e-7,-1.0000001192092896,0,-0.46563413739204407,-0.884977400302887,3.2410036965302425e-7,0,0.08144266903400421,0.2947814464569092,0.008519010618329048,1],[7,-0.33654990792274475,0.909898579120636,-0.24252499639987946,0,-0.22826512157917023,-0.3286970555782318,-0.9164350032806396,0,-0.9135801196098328,-0.25306615233421326,0.318321168422699,0,0.32535818219184875,0.03998677805066109,-0.11377697438001633,1],[7,-0.33654987812042236,0.9098984599113464,-0.24252499639987946,0,-0.22826510667800903,-0.32869699597358704,-0.9164350628852844,0,-0.913580060005188,-0.25306612253189087,0.318321168422699,0,0.30480289459228516,0.03998678922653198,-0.11377696692943573,1],[7,0.4519859254360199,-0.08958990126848221,0.8875147700309753,0,0.040657151490449905,0.9959788918495178,0.07983322441577911,0,-0.8910978436470032,3.280292162344267e-7,0.4538109600543976,0,0.1817328929901123,0.00765672791749239,-0.13694430887699127,1],[7,0.29265159368515015,-0.05172059312462807,0.9548189043998718,0,0.015156717970967293,0.9986615777015686,0.049449894577264786,0,-0.9560986757278442,3.313179206543282e-7,0.2930437922477722,0,0.16351811587810516,0.005466449540108442,-0.11057998239994049,1],[7,0.1854037195444107,-0.2753024399280548,0.9433097839355469,0,0.053094327449798584,0.9613577127456665,0.27013397216796875,0,-0.9812265038490295,5.513433620762953e-7,0.1928563266992569,0,0.1468178629875183,0.020189397037029266,-0.09313400089740753,1],[7,0.18540368974208832,-0.2753024697303772,0.9433097839355469,0,0.053094495087862015,0.9613576531410217,0.27013397216796875,0,-0.9812265038490295,7.232531515910523e-7,0.1928563266992569,0,0.12227209657430649,0.020189378410577774,-0.09313399344682693,1],[7,0.058581411838531494,-0.9322522282600403,0.35703563690185547,0,-0.06718390434980392,-0.36052078008651733,-0.9303286671638489,0,-0.996019184589386,-0.03051292896270752,0.08375215530395508,0,0.3800753057003021,-0.03738650307059288,-0.028452767059206963,1],[7,-0.0585813969373703,0.9322518706321716,-0.3570358157157898,0,-0.0671837255358696,-0.3605208992958069,-0.9303284287452698,0,-0.996019184589386,-0.03051295503973961,0.08375198394060135,0,0.3801158368587494,-0.03803146257996559,-0.02820567600429058,1],[7,-0.4742397964000702,-0.8803957104682922,2.2617271611125034e-7,0,3.0358316394085705e-7,9.336886819255596e-8,0.9999997615814209,0,-0.880395770072937,0.474239706993103,2.2299403212855395e-7,0,0.2135031819343567,0.14581024646759033,-0.009000102989375591,1],[7,-0.4742397964000702,-0.8803957104682922,2.2617271611125034e-7,0,3.0358316394085705e-7,9.336886819255596e-8,0.9999997615814209,0,-0.880395770072937,0.474239706993103,2.2299403212855395e-7,0,0.12188676744699478,0.14581026136875153,-0.009000102989375591,1],[7,1,-5.782931111752987e-8,-5.587918128213687e-9,0,-5.587935447692871e-9,-2.756714252427628e-7,-0.9999997615814209,0,5.782931111752987e-8,1,-2.756713399776345e-7,0,-0.23667798936367035,-0.2269320785999298,0.009085218422114849,1],[7,-0.33389443159103394,-0.9426104426383972,2.542557240303722e-7,0,3.473836898137961e-7,1.4668448500287923e-7,0.9999997615814209,0,-0.942610502243042,0.33389437198638916,2.7847028150063124e-7,0,0.2644696533679962,0.17677174508571625,-0.00900011882185936,1],[7,0.8117795586585999,-0.5831953883171082,-0.02995176427066326,0,0.0474778413772583,0.01479235477745533,0.9987627863883972,0,-0.5820307731628418,-0.8121972680091858,0.039696983993053436,0,0.038468845188617706,0.2649611532688141,-0.01352649088948965,1],[7,0.7347710132598877,-0.6776328682899475,-0.03041616827249527,0,0.048828404396772385,0.008114737458527088,0.9987742304801941,0,-0.6765554547309875,-0.7353556156158447,0.039050206542015076,0,0.04318578541278839,0.26166102290153503,-0.013315492309629917,1],[7,0.7849104404449463,-0.6188623309135437,-0.03041616827249527,0,0.04805586114525795,0.01186154130846262,0.9987742304801941,0,-0.6177428960800171,-0.7854099869728088,0.039050210267305374,0,0.013815042562782764,0.26351499557495117,-0.013315492309629917,1],[7,1,-5.782931111752987e-8,-5.587918128213687e-9,0,-5.587935447692871e-9,-2.756714252427628e-7,-0.9999997615814209,0,5.782931111752987e-8,1,-2.756713399776345e-7,0,-0.17539045214653015,-0.22709660232067108,0.009231855161488056,1],[7,-0.47423967719078064,-0.8803957104682922,2.390224551618303e-7,0,-1.3887918726140924e-7,-1.9668480888412887e-7,-0.9999997615814209,0,0.8803956508636475,-0.474239706993103,-2.8992904077540516e-8,0,-0.18536539375782013,0.36066752672195435,0.009061933495104313,1],[7,-0.47423967719078064,-0.8803957104682922,2.390224551618303e-7,0,-1.3887918726140924e-7,-1.9668480888412887e-7,-0.9999997615814209,0,0.8803956508636475,-0.474239706993103,-2.8992904077540516e-8,0,-0.27698183059692383,0.36066752672195435,0.009061933495104313,1],[7,-0.3338944613933563,-0.9426104426383972,2.671050935987296e-7,0,-1.688065225380342e-7,-2.2357231443947967e-7,-0.9999997615814209,0,0.9426104426383972,-0.3338944911956787,-8.44692209511777e-8,0,-0.16258567571640015,0.32804474234580994,0.009061942808330059,1],[7,-0.8117796778678894,0.5831953883171082,-0.02994902990758419,0,0.04747561737895012,0.014793947339057922,-0.9987627863883972,0,-0.5820308327674866,-0.8121972680091858,-0.039696983993053436,0,0.038468845188617706,0.2649611532688141,0.013526488095521927,1],[7,-0.734771192073822,0.6776329874992371,-0.03041343204677105,0,0.04882638901472092,0.008116588927805424,-0.9987742304801941,0,-0.6765554547309875,-0.7353556156158447,-0.03905020281672478,0,0.04318579286336899,0.26166102290153503,0.013315490446984768,1],[7,-0.7849105596542358,0.6188623309135437,-0.0304134339094162,0,0.048053715378046036,0.011863232590258121,-0.9987742304801941,0,-0.6177429556846619,-0.7854099273681641,-0.039050206542015076,0,0.013815046288073063,0.26351499557495117,0.013315491378307343,1],[7,-0.7684171199798584,-0.04823441430926323,0.6381290555000305,0,0.0012473722454160452,0.9970406889915466,0.07686561346054077,0,-0.6399481892585754,0.05986083298921585,-0.7660828828811646,0,0.10569632053375244,-0.02792271226644516,0.26024898886680603,1],[7,-0.16038766503334045,-0.0052536409348249435,0.9870402216911316,0,-0.38480162620544434,0.9211987853050232,-0.05762459710240364,0,-0.9089574217796326,-0.38905689120292664,-0.14977054297924042,0,0.1816757321357727,0.0925070196390152,0.15872129797935486,1],[7,-0.15246526896953583,0.05006157606840134,0.9870401620864868,0,-0.045595090836286545,0.9972965717315674,-0.05762472376227379,0,-0.9872565269470215,-0.053789954632520676,-0.14977054297924042,0,0.19132812321186066,0.028637241572141647,0.15872129797935486,1],[7,0.7684171199798584,0.04823167994618416,0.6381292343139648,0,0.001249479129910469,0.9970407485961914,-0.0768638625741005,0,-0.6399481892585754,0.05986083298921585,0.7660828828811646,0,0.10569633543491364,-0.02792271226644516,-0.26024898886680603,1],[7,0.16038870811462402,0.005251065827906132,0.9870399236679077,0,-0.38480111956596375,0.9211987853050232,0.05762733146548271,0,-0.9089574217796326,-0.38905689120292664,0.14977049827575684,0,0.1816757470369339,0.0925070196390152,-0.15872125327587128,1],[7,0.15246540307998657,-0.05006455257534981,0.9870399236679077,0,-0.04559464752674103,0.9972965121269226,0.057627659291028976,0,-0.9872565269470215,-0.05378996208310127,0.14977052807807922,0,0.19132812321186066,0.028637273237109184,-0.15872125327587128,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[42,".bin",4029911404,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":495792,"length":45084,"count":22542,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":495792,"count":5634,"stride":88},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,18,20,22,23,24,25,26,27,28,30,32,34,35,36,37,38,39,40,42,44,45,46,48,49,50,52,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69]]},"minPosition",8,[1,-0.1669444441795349,-0.04851248487830162,-0.00014245852071326226],"maxPosition",8,[1,0.2702215313911438,0.13154932856559753,0.48549264669418335]]],-1],0,0,[],[],[]],[[[29,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"USE_1ST_SHADE_MAP":true,"USE_2ND_SHADE_MAP":true},{},{}],[[{},[{},"mainColor",8,[4,4286085240],"shadeColor1",8,[4,4286085240],"shadeColor2",8,[4,4286085240],"specular",8,[4,16777215],"mainTexture",6,0,"shadeMap1",6,1,"shadeMap2",6,2],{},{}],0,11,0,0]]],0,0,[0,0,0,0],[6,12,13,5],[12,12,12,13]],[[[74,"Skin-0",1759382128,["RootNode/Bip001/Bip001 Pelvis/Bip001 Spine","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","RootNode/Bip001","RootNode/Bip001/Bip001 Pelvis","RootNode/Bip001/Bip001 Pelvis/Bone001","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","RootNode/Bip001/Bip001 Pelvis/Bone001/Bone002","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","RootNode/Bip001/Bip001 Pelvis/Bone001/Bone002/Bone003","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01/Bip001 L Finger02","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11/Bip001 L Finger12","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21/Bip001 L Finger22","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31/Bip001 L Finger32","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01/Bip001 R Finger02","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11/Bip001 R Finger12","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21/Bip001 R Finger22","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3/Bip001 R Finger31","RootNode/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3/Bip001 R Finger31/Bip001 R Finger32","RootNode/Bip001/Bip001 Pelvis/Bone001/Bone002/Bone003/Bone004"],[[[7,2.2274786459774987e-8,-0.0000015461057500942843,1,0,-0.11514171212911606,-0.9933491349220276,-0.0000015332580005633645,0,0.9933490753173828,-0.11514171212911606,-2.001479089130953e-7,0,-0.1405724436044693,0.010364294983446598,3.5457542679750986e-8,1],[7,1.653620671504541e-7,-0.0000015570910818496486,1,0,-0.23027148842811584,-0.9731263518333435,-0.0000014771685528103262,0,0.9731263518333435,-0.23027150332927704,-5.194719960854854e-7,0,-0.16186504065990448,0.029584145173430443,8.876574497662659e-8,1],[7,0.0000011925066019102815,-0.0000030654507554572774,1,0,-0.9436606168746948,0.33091479539871216,0.000002139724529115483,0,-0.33091479539871216,-0.94366055727005,-0.0000024981272872537374,0,-0.017562413588166237,0.30190104246139526,9.718271485326113e-7,1],[7,0.0000012218953315823455,1,-1.1920927533992653e-7,0,-1,0.0000012218953315823455,1.1920930376163597e-7,0,1.1920946008103783e-7,1.1920914033680674e-7,1,0,-0.00489539559930563,6.7111316504053775e-9,-0.097279854118824,1],[7,0.0000012675907328230096,0.0000026086952402692987,1,0,1.192090977042426e-7,-1,0.0000026086952402692987,0,1,1.1920579368052131e-7,-0.0000012675910738835228,0,-0.097279854118824,-0.00489539559930563,1.4840777851077291e-7,1],[7,2.1695088037176902e-7,1,0.000006260472218855284,0,-1.1920931797249068e-7,0.000006260472218855284,-1,0,-1,2.1695015561817854e-7,1.1921068221454334e-7,0,0.09096343070268631,0.0020365386735647917,8.880836510627432e-9,1],[7,0.0000011566810371732572,-0.0000031850943287281552,1,0,-0.9051579236984253,0.4250749349594116,0.000002400883658992825,0,-0.4250749349594116,-0.9051579236984253,-0.0000023913382847240428,0,0.02983969636261463,0.30212312936782837,9.724433311930625e-7,1],[7,2.518295048048458e-7,1,-1.7682943109775806e-7,0,-1.1920931797249068e-7,-1.7682938846519392e-7,-1,0,-1,2.518295332265552e-7,1.1920928955078125e-7,0,0.06332146376371384,0.0020365393720567226,-1.4284304850065155e-9,1],[7,0.7723608016967773,0.37946823239326477,0.5093747973442078,0,0.05714479833841324,0.7571685910224915,-0.650715172290802,0,-0.6326082944869995,0.5316949486732483,0.5631227493286133,0,0.11409968137741089,-0.16576841473579407,-0.20833952724933624,1],[7,0.28243425488471985,0.8128764629364014,0.509374737739563,0,-0.4917161762714386,0.5786060690879822,-0.6507152318954468,0,-0.8236784934997559,-0.06668352335691452,0.5631227493286133,0,0.1282358318567276,-0.10632426291704178,-0.20833951234817505,1],[7,0.19386839866638184,-0.9665555953979492,0.16788530349731445,0,-0.16401353478431702,0.13678964972496033,0.9769279956817627,0,-0.9672200679779053,-0.21693092584609985,-0.13200899958610535,0,0.0848073959350586,0.21535779535770416,0.044943053275346756,1],[7,1,-0.0000012166403848823393,2.0810468015497463e-7,0,0.0000012319269444560632,0.9733094573020935,-0.22949650883674622,0,7.666449164389633e-8,0.2294965237379074,0.9733093976974487,0,-0.06138377636671066,-0.04758434370160103,-0.27403298020362854,1],[7,2.518295048048458e-7,1,-2.662364124716987e-7,0,-1.1920931797249068e-7,-2.6623635562827985e-7,-1,0,-1,2.518295332265552e-7,1.1920926112907182e-7,0,0.04256601631641388,0.002036543097347021,-3.4352483080368756e-9,1],[7,1.5361374039457587e-7,0.0000012126174624427222,-1,0,-0.09983352571725845,-0.9950041174888611,-0.0000012218953315823455,0,-0.9950039982795715,0.09983353316783905,-3.178642415946342e-8,0,0.09630513191223145,-0.014582723379135132,0.038401152938604355,1],[7,-0.743409276008606,0.3816952407360077,0.5492280721664429,0,-0.45178255438804626,0.3189437687397003,-0.8331672549247742,0,-0.4931887686252594,-0.8675156831741333,-0.06466250121593475,0,0.12438517063856125,0.08546216785907745,-0.1343267261981964,1],[7,-0.279941588640213,0.7873887419700623,0.5492282509803772,0,-0.11052705347537994,0.5418639183044434,-0.8331671953201294,0,-0.9536332488059998,-0.2939426600933075,-0.06466249376535416,0,0.13550910353660583,-0.010141851380467415,-0.1343267410993576,1],[7,-0.09029395878314972,0.8307796120643616,0.5492287874221802,0,0.01775881089270115,0.5527368187904358,-0.833166778087616,0,-0.9957567453384399,-0.06547626852989197,-0.06466247141361237,0,0.10454931110143661,-0.03527167811989784,-0.1343267560005188,1],[7,-0.1704881191253662,-0.9295406341552734,0.3269375264644623,0,-0.3949100375175476,0.3684396743774414,0.8416045904159546,0,-0.9027624130249023,0.014372673816978931,-0.4298994839191437,0,0.09240160882472992,0.1967681646347046,0.07022076100111008,1],[7,-0.5007060766220093,-0.801501989364624,0.3269374370574951,0,-0.23154430091381073,0.487943559885025,0.8416045904159546,0,-0.8340746760368347,0.3456960916519165,-0.42989951372146606,0,0.1427692025899887,0.15510283410549164,0.07022077590227127,1],[7,-0.12472014129161835,-0.9532858729362488,0.27512019872665405,0,-0.29347264766693115,0.30032169818878174,0.9075685739517212,0,-0.9477967619895935,0.03245184198021889,-0.31721949577331543,0,0.10285389423370361,0.19760505855083466,0.03920423984527588,1],[7,-0.931583821773529,0.15894509851932526,0.32693731784820557,0,0.36351266503334045,0.39944979548454285,0.8416046500205994,0,0.0031738963443785906,0.9028712511062622,-0.4298994839191437,0,0.18984714150428772,-0.05408330261707306,0.07022080570459366,1],[7,-0.7607463598251343,-0.5878554582595825,0.27512016892433167,0,0.0037561708595603704,0.4198871850967407,0.9075685739517212,0,-0.649038553237915,0.6914628744125366,-0.31721949577331543,0,0.19522152841091156,0.08452165126800537,0.039204247295856476,1],[7,-0.961165726184845,0.021666616201400757,0.2751201391220093,0,0.26708272099494934,0.32401564717292786,0.9075685739517212,0,-0.06947930157184601,0.9458035826683044,-0.3172195255756378,0,0.18869028985500336,-0.043984007090330124,0.039204247295856476,1],[7,-0.16753040254116058,-0.9366626739501953,0.3075658679008484,0,-0.048385221511125565,0.31941092014312744,0.9463803172111511,0,-0.9846788644790649,0.1436658352613449,-0.0988316684961319,0,0.13036467134952545,0.17881815135478973,-0.016798876225948334,1],[7,-0.7626350522041321,-0.569026529788971,0.3075656294822693,0,0.18306250870227814,0.26618117094039917,0.9463803768157959,0,-0.620383620262146,0.7780465483665466,-0.09883163869380951,0,0.20257586240768433,0.055251650512218475,-0.016798829659819603,1],[7,-0.951192319393158,0.025230130180716515,0.3075655996799469,0,0.30854853987693787,0.09571873396635056,0.9463804364204407,0,-0.005562487058341503,0.9950886368751526,-0.0988316535949707,0,0.17860718071460724,-0.07043524831533432,-0.016798824071884155,1],[7,-0.7723608016967773,-0.37947019934654236,0.5093733072280884,0,0.05714291334152222,0.757167637348175,0.6507163643836975,0,-0.6326085329055786,0.5316948294639587,-0.5631226301193237,0,0.11409968882799149,-0.16576842963695526,0.20833952724933624,1],[7,-0.2824328541755676,-0.8128780126571655,0.5093732476234436,0,-0.4917168617248535,0.5786041021347046,0.6507164835929871,0,-0.8236785531044006,-0.06668372452259064,-0.5631226301193237,0,0.1282358318567276,-0.10632427036762238,0.20833951234817505,1],[7,-0.1938677430152893,0.9665552973747253,0.16788771748542786,0,-0.16401399672031403,0.13679207861423492,-0.9769275188446045,0,-0.96722012758255,-0.21693065762519836,0.13200902938842773,0,0.08480740338563919,0.21535779535770416,-0.04494304209947586,1],[7,-1,-0.0000012166403848823393,-1.2068190358149877e-7,0,-0.0000012118638323954656,0.9733094573020935,0.22949650883674622,0,-1.617539169274096e-7,0.2294965237379074,-0.9733093976974487,0,-0.06138378381729126,-0.04758434742689133,0.27403298020362854,1],[7,1.5361374039457587e-7,0.0000012126174624427222,-1,0,-0.09983352571725845,-0.9950041174888611,-0.0000012218953315823455,0,-0.9950039982795715,0.09983353316783905,-3.178642415946342e-8,0,0.09630511701107025,-0.014582721516489983,-0.038401179015636444,1],[7,0.7434104681015015,-0.38169586658477783,0.5492259860038757,0,-0.4517807364463806,0.3189428150653839,0.8331685662269592,0,-0.49318864941596985,-0.8675158023834229,0.0646626278758049,0,0.12438519299030304,0.08546214550733566,0.1343267261981964,1],[7,0.2799420654773712,-0.7873901128768921,0.5492261052131653,0,-0.11052633821964264,0.5418619513511658,0.8331684470176697,0,-0.9536332488059998,-0.29394280910491943,0.06466261297464371,0,0.13550911843776703,-0.010141879320144653,0.1343267261981964,1],[7,0.09029410779476166,-0.8307812809944153,0.5492262840270996,0,0.017759067937731743,0.552734375,0.8331683874130249,0,-0.9957567453384399,-0.0654764473438263,0.06466257572174072,0,0.10454931110143661,-0.03527176007628441,0.1343267410993576,1],[7,0.1704893857240677,0.929539680480957,0.3269396424293518,0,-0.3949096202850342,0.3684421181678772,-0.8416038155555725,0,-0.9027624130249023,0.01437289547175169,0.42989954352378845,0,0.09240162372589111,0.19676817953586578,-0.07022073864936829,1],[7,0.5007068514823914,0.801500678062439,0.3269394338130951,0,-0.23154303431510925,0.4879456162452698,-0.8416038155555725,0,-0.8340746164321899,0.3456963002681732,0.42989957332611084,0,0.1427692174911499,0.15510283410549164,-0.07022076845169067,1],[7,0.12472113221883774,0.9532850980758667,0.2751224637031555,0,-0.2934723496437073,0.3003241717815399,-0.9075678586959839,0,-0.9477967619895935,0.032452069222927094,0.3172195553779602,0,0.10285390913486481,0.19760505855083466,-0.03920421004295349,1],[7,0.9315829873085022,-0.15894630551338196,0.32693931460380554,0,0.3635150194168091,0.3994494080543518,-0.8416039347648621,0,0.0031741189304739237,0.9028711318969727,0.4298996329307556,0,0.1898471564054489,-0.05408330261707306,-0.07022080570459366,1],[7,0.760746419429779,0.587854266166687,0.27512234449386597,0,0.003758045146241784,0.4198886454105377,-0.9075678586959839,0,-0.6490383744239807,0.691463053226471,0.3172195851802826,0,0.19522155821323395,0.08452165126800537,-0.03920423984527588,1],[7,0.9611651301383972,-0.02166765183210373,0.27512234449386597,0,0.26708510518074036,0.32401561737060547,-0.9075678586959839,0,-0.0694790706038475,0.9458035826683044,0.317219614982605,0,0.18869031965732574,-0.04398401081562042,-0.03920424357056618,1],[7,0.16753080487251282,0.9366617202758789,0.3075682818889618,0,-0.04838480427861214,0.31941333413124084,-0.946379542350769,0,-0.9846788048744202,0.1436660885810852,0.09883176535367966,0,0.13036468625068665,0.17881815135478973,0.01679890602827072,1],[7,0.7626346349716187,0.5690256357192993,0.30756792426109314,0,0.18306438624858856,0.266182541847229,-0.9463796615600586,0,-0.6203833818435669,0.778046727180481,0.09883172810077667,0,0.2025758922100067,0.05525165796279907,0.0167988408356905,1],[7,0.9511915445327759,-0.02523060329258442,0.30756789445877075,0,0.3085508644580841,0.09571866691112518,-0.9463796615600586,0,-0.00556225934997201,0.9950886368751526,0.09883172810077667,0,0.17860721051692963,-0.07043524831533432,0.01679883524775505,1],[7,2.518295048048458e-7,1,-2.662364124716987e-7,0,-1.1920931797249068e-7,-2.6623635562827985e-7,-1,0,-1,2.518295332265552e-7,1.1920926112907182e-7,0,-0.002718620002269745,0.002036545192822814,-3.8128913359969374e-9,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[42,".bin",3426287707,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":65664,"length":6324,"count":3162,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":65664,"count":912,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,4,5,7,8,9,12,14,15,17,18,19,20,21,22,23,24,25,26,27,31,32,34,35,36,37,38,39,40,41,42]]},"minPosition",8,[1,-0.22907908260822296,-0.16174250841140747,0.00036565682967193425],"maxPosition",8,[1,0.22907905280590057,0.10926813632249832,0.4218575060367584]]],-1],0,0,[],[],[]],[[[78],[82,"hellFireAll",null,null,null,[-3],[[75,-2,[8,"2dkUbhXsxREoFJwl3gM/73"],[3,4,5,6,7,8],9]],[1,"ecVHJiD7VWeqYR2feA2ibi",-1,0]],[36,"Bip001 L Hand",null,null,null,[-4,-5,-6,-7],[1,"7cO+pNYVdbFYwxPCQP+68X",1,0],[1,0.0985550209879875,-9.53674295089968e-9,3.55271359939116e-17],[3,-0.7835228379232916,0.1344524014949617,0.2780464268892012,0.5391703800089699],[1,-112.57944412228663,35.663070220821915,5.1138888602451065]],[36,"Bip001 R Hand",null,null,null,[-8,-9,-10,-11],[1,"63j/1ZPsFfQaxaE5Axwz6e",1,0],[1,0.0985550507903099,-9.53674295089968e-9,0],[3,0.7705641876095063,0.01694609387123941,0.147887034115389,0.6197363050659227],[1,103.68148156553391,-12.216172423062721,12.088249757089613]],[36,"Bip001 Spine",null,null,null,[-12,-13,-14],[1,"dchWImbBddqJJWTP+a2kl5",1,0],[1,0.0435471907258034,0.000995199661701918,0.00000301539898828196],[3,-0.07884031358772586,0.0016819720247907635,-0.04391140765595002,0.995918251766263],[1,-9.061617012116598,-0.20555464305236765,-5.03300367409808]],[36,"Bip001 Neck",null,null,null,[-15,-16,-17],[1,"79rzhWEZVbaJ8KQZXidgo5",1,0],[1,0.139951422810555,0.0623811595141888,9.53674259562831e-8],[3,0.09711068163911908,-0.08146346394279157,0.769810024120859,0.6255603458636664],[1,129.57325784116526,-128.2883201941684,71.31663172513647]],[45,"RootNode",null,null,null,1,[-18,-19],[1,"f8sH3ZrX1e+5Upd2khNnpv",1,0]],[54,"Bip001",null,null,null,6,[[[58,"Bip001 Footsteps",null,null,null,-20,[1,"c6Xb2vJZpcOIj9X0rxod6L",1,0],[1,0.018691772595048,0.00147346640005708,-0.161617860198021],[3,-0.03731353210889146,-0.044032484322090205,0.7032807474016782,0.7085654740248926],[1,48.51597138236433,-55.11107521780602,89.30734381519581]],-21],4,1],[1,"d2ihLCaRVXbr3/qv72B/PC",1,0],[1,0.00483212061226368,0.171956568956375,-0.0156058333814144],[3,-0.47464680907361173,-0.4661589288015181,-0.5284302260887015,0.5274161126574572],[1,-90.52234738520004,-89.60117311369706,-6.5969075828505455]],[83,"Bip001 Pelvis",null,null,null,7,[4,-22],[1,"30IDSK/rpYb7ypXbVqlsID",1,0],[3,-0.4999999925491744,-0.4999999925491744,-0.4999993070957696,0.5000007078049007],[1,-89.9999197452773,-89.9999197452773,-0.0000017074910412130916]],[3,"Bip001 Spine1",null,null,null,4,[5],[1,"909lrAknddUJlUzaih/1Jo",1,0],[1,0.0235824380069971,-0.00012330173922237,-0.00000512599945068359],[3,0.0193953258489077,-0.003403492595283382,-0.16115981769186505,0.9867318535118309],[1,2.247544298287597,-0.02811355756823208,-18.55259699635517]],[3,"Bip001 L Clavicle",null,null,null,5,[-23],[1,"30admUpplVqb+Dvg+v3d6j",1,0],[1,-0.0553962141275406,0.0434432215988636,0.0779887586832047],[3,0.49969651300343904,-0.47582410818807397,0.3845459742286705,0.6132040497776826],[1,78.17886282153864,-75.43764088033289,-0.22488639075223646]],[3,"Bip001 L UpperArm",null,null,null,10,[-24],[1,"5ctHvaYeBWcIuvNWjCVJKo",1,0],[1,0.0195168498903513,-8.88178399847791e-18,0],[3,0.2667069660496362,0.29085012478151323,0.06353158330721491,0.9166446078484589],[1,28.01162887003897,31.25371273117671,15.76040777031424]],[3,"Bip001 L Forearm",null,null,null,11,[2],[1,"60h8zP1q5Wk4yizSHzfXWx",1,0],[1,0.0976649299263954,0,0],[3,1.2294636025351675e-17,7.371593372996029e-17,-0.5190756893884699,0.854728277691738],[1,1.2120341521923538e-14,1.724360687130243e-14,-62.540541941624944]],[3,"Bip001 L Finger0",null,null,null,2,[-25],[1,"4eHDUezcJVtraUjSYack0C",1,0],[1,0.00167991640046239,0.0473448559641838,-0.0304266251623631],[3,0.8677692362147749,0.32183378745037805,0.036329280370775055,0.37693467513922474],[1,128.88319346764786,12.80270803753818,35.869597778885826]],[3,"Bip001 L Finger01",null,null,null,13,[-26],[1,"32W/mvkddTdpFZj0/XwAUp",1,0],[1,0.0187357701361179,-8.88178399847791e-18,0],[3,8.923357432194895e-9,6.7285792292916724e-9,0.6020630778823461,0.7984485269889575],[1,0.0000012806603955115282,5.5697903602971554e-14,74.03559609561042]],[11,"Bip001 L Finger02",null,null,null,14,[[32,"Bip001 L Finger0Nub",null,null,null,-27,[1,"04vIZQy41ZNKaJbqvru6Z1",1,0],[1,0.00469155283644795,-3.55271359939116e-17,1.77635679969558e-17]]],[1,"d0Vuuk9JBekYH3pHnPKzhh",1,0],[1,0.0256373584270477,-1.90734859017994e-8,-9.53674295089968e-9],[3,-4.2004995085256835e-9,1.0356443714316383e-8,0.3758542839957516,0.9266787777876653],[1,-0.0000012433997586241227,0.0000017849746825295376,44.154245287265184]],[3,"Bip001 L Finger1",null,null,null,2,[-28],[1,"2e4AVHLqVe959i/c8b5E6r",1,0],[1,0.0273232646286488,0.00849418621510267,-0.0330937765538692],[3,0.12013764098559818,0.13658003695701493,0.39723319358109416,0.8995102170851652],[1,9.323162291846538,13.073059448269886,48.369748349103084]],[3,"Bip001 L Finger11",null,null,null,16,[-29],[1,"93eGria4heJLuF9tBr9C/I",1,0],[1,0.0167561713606119,-9.53674295089968e-9,-9.53674295089968e-9],[3,1.994828068200099e-8,-6.7937684656260275e-9,0.44139220055868483,0.8973142845658713],[1,0.000003923681011858106,-0.000002797671629029962,52.385485584520595]],[11,"Bip001 L Finger12",null,null,null,17,[[30,"Bip001 L Finger1Nub",null,null,null,-30,[1,"e7IC/S7I5ZX5mj4v03Lt51",1,0],[1,0.025617141276598,0,0],[1,0.0000014941039063847268,0.0000017075473147670759,-0.0000017075472702393094]]],[1,"8bpCatlvNVqLJ8lXo+xXrh",1,0],[1,0.0206624791026115,-1.90734859017994e-8,-9.53674295089968e-9],[3,-2.165090756713991e-9,2.0310425185674513e-8,0.7574184478799769,0.6529297778560007],[1,-179.99998693851705,179.9999884128353,81.52572104010244]],[3,"Bip001 L Finger2",null,null,null,2,[-31],[1,"16/JX6xClcorIGJTD6fGy7",1,0],[1,0.0322261229157448,0,-4.76837147544984e-9],[3,0.07606634348630154,0.08286828385378915,0.3962321203812071,0.9112337053127284],[1,6.17413367440458,7.687526363439967,47.284161535870425]],[3,"Bip001 L Finger21",null,null,null,19,[-32],[1,"65gmpwzPdcN43CCjJREeBf",1,0],[1,0.0240655317902565,-4.76837147544984e-9,9.53674295089968e-9],[3,-4.6384616501730475e-8,1.1154562478387106e-8,0.6131617356218959,0.7899573950341511],[1,-0.000020085850207841424,0.000017208641333051622,75.63693965503242]],[11,"Bip001 L Finger22",null,null,null,20,[[30,"Bip001 L Finger2Nub",null,null,null,-33,[1,"51IoUc8t1crpUvQR/AbAgs",1,0],[1,0.0380246527493,9.53674295089968e-9,4.76837147544984e-9],[1,6.403301997025942e-7,0.0000017075472793834055,0.0000023478775367335443]]],[1,"738hTmXqZcVKwZqP7mvjOW",1,0],[1,0.0208807419985533,-1.90734859017994e-8,9.53674295089968e-9],[3,1.093342919748109e-8,-2.8708009992852648e-8,0.5719389875934228,0.8202961626574938],[1,0.000008413753078587316,-0.00000987673648624734,69.77109646675848]],[3,"Bip001 L Finger3",null,null,null,2,[-34],[1,"02Zt08tY9WTZABXE8Kw/ZW",1,0],[1,0.0305347442626953,0.000674514740239829,0.0301563069224358],[3,0.06577009069572448,-0.03256409668226991,0.44251514200663333,0.8937528874761709],[1,13.717246848635117,-10.870255383387503,51.87956347251753]],[3,"Bip001 L Finger31",null,null,null,22,[-35],[1,"b43q8qvlFRhLPZc7fGmntN",1,0],[1,0.0203018952161074,9.53674295089968e-9,1.90734859017994e-8],[3,8.959100012374552e-9,-1.1907102705002496e-8,0.6012350838974863,0.7990721956686908],[1,0.000005922457099187473,-0.000006163701452831216,73.91681064043897]],[11,"Bip001 L Finger32",null,null,null,23,[[30,"Bip001 L Finger3Nub",null,null,null,-36,[1,"60g1D5wa9RIr/sLY/RnUlm",1,0],[1,0.0221786294132471,9.53674295089968e-9,9.53674295089968e-9],[1,-3.0682490889249845e-7,0.000001707547293360452,3.2016511277230086e-7]]],[1,"01S6nQ7AtcF62JHdwRj0s+",1,0],[1,0.0187038946896791,-3.55271359939116e-17,-1.43051144263495e-8],[3,-2.110289476017051e-9,-1.451241333714406e-9,0.5666394768837021,0.8239658386346878],[1,-2.934847021154018e-7,1.3503589263385098e-14,69.03243426931695]],[3,"Bip001 R Clavicle",null,null,null,5,[-37],[1,"9dqjgjXrFUU6GzBaAVa7lE",1,0],[1,-0.0862638652324677,0.0439251326024532,-0.0408339649438858],[3,-0.31494682788213624,0.5447518784182745,0.5462424117588589,0.5528771239277375],[1,-77.74848850829478,101.36717037072465,15.121935347390197]],[3,"Bip001 R UpperArm",null,null,null,25,[-38],[1,"4ceeyMFMRRc6sPPCS39v/d",1,0],[1,0.0195168536156416,0,-7.10542719878232e-17],[3,-0.3682861037624846,-0.16460585627801622,0.18591482975313256,0.8959385770979466],[1,-42.22989921007277,-10.21734080552309,27.02509027432383]],[3,"Bip001 R Forearm",null,null,null,26,[3],[1,"4fX7F4ouRXjLMGCWg/UDEI",1,0],[1,0.0976649522781372,-3.81469718035987e-8,-7.10542719878232e-17],[3,1.7838978586520216e-17,2.1263650221553328e-17,-0.6427169385193824,0.7661037377145946],[1,1.8018381339515497e-14,1.829693947571505e-14,-79.98942880418713]],[3,"Bip001 R Finger0",null,null,null,3,[-39],[1,"b2+XuGA+ZRM6CMSGcc6mgT",1,0],[1,0.00167989730834961,0.0473448559641838,0.0304266400635242],[3,0.8367007365485242,0.3956416542911125,-0.0036098926753753485,-0.37866413551301803],[1,-122.38989930803606,-23.142200203961792,41.6670758760148]],[3,"Bip001 R Finger01",null,null,null,28,[-40],[1,"62x931i4Nb2qhnBUKQ1nXA",1,0],[1,0.0187357906252146,9.53674295089968e-9,4.76837147544984e-9],[3,1.5949782851025616e-9,-1.6583481509880312e-8,0.530789145048299,0.8475039135596341],[1,0.0000026655290718008563,-0.0000039116762110244254,64.11757939532588]],[11,"Bip001 R Finger02",null,null,null,29,[[38,"Bip001 R Finger0Nub",null,null,null,-41,[1,"0d1B+kd+1bfLNimdqoTjhs",1,0],[1,0.00469154817983508,0,-4.76837147544984e-9],[3,-7.45058059692383e-9,-1.49011611938477e-8,1,-1.72254645091774e-16],[1,-1,-1,-1],[1,179.99999829245272,179.99999914622634,-7.0167096047109555e-15]]],[1,"34dEN4/pJUuaLtwrkg515E",1,0],[1,0.0256374068558216,-1.90734859017994e-8,4.76837147544984e-9],[3,1.2048014893237202e-8,1.1506564459347738e-8,0.2943426039166936,0.9556999694043838],[1,0.000001126533426029715,0.0000010327178089479668,34.23624244054477]],[3,"Bip001 R Finger1",null,null,null,3,[-42],[1,"66+L1NkhdcXbp2pFtaapVf",1,0],[1,0.027323255315423,0.00849418621510267,0.0330937728285789],[3,-0.10788153174500337,-0.14645388807355283,0.3179898876512118,0.9304812008461326],[1,-7.911080763625106,-15.118100508637191,38.56239781231835]],[3,"Bip001 R Finger11",null,null,null,31,[-43],[1,"21ZuEUTWlWB44I5QhohHMU",1,0],[1,0.0167561713606119,1.77635679969558e-17,-1.90734859017994e-8],[3,-5.026167105226965e-18,1.2935634451740551e-17,0.36217350883523153,0.9321106959465578],[1,-1.4555609407096644e-15,2.1558385079974003e-15,42.467477560418665]],[11,"Bip001 R Finger12",null,null,null,32,[[38,"Bip001 R Finger1Nub",null,null,null,-44,[1,"59F8HC9ttTeIgF/T9OeECO",1,0],[1,0.0256171319633722,-3.55271359939116e-17,-9.53674295089968e-9],[3,5.55111512312578e-17,1.38777894621757e-17,1,-1.49011611938477e-8],[1,-1,-1,-1],[1,-180,-180,-0.000001707547292503193]]],[1,"aebC6B6gRWm7t3mJhCNaR0",1,0],[1,0.02066246047616,9.53674295089968e-9,1.90734859017994e-8],[3,-4.24089960819995e-8,-2.0540765850412694e-8,0.6981421816967707,0.7159591427837702],[1,-0.00007287441375279881,0.00006777328610707621,88.55628073721428]],[3,"Bip001 R Finger2",null,null,null,3,[-45],[1,"0dQrEeC6ZQvqICfDxduDTW",1,0],[1,0.0322261340916157,3.55271359939116e-17,-4.76837147544984e-9],[3,-0.06861816537976162,-0.08913347373587875,0.31597919153075943,0.9420742655222353],[1,-5.270466401330385,-9.023954396484141,37.415020507230295]],[3,"Bip001 R Finger21",null,null,null,34,[-46],[1,"177D6BUnVVMr9fuvi8coDH",1,0],[1,0.0240655317902565,9.53674295089968e-9,9.53674295089968e-9],[3,-8.085076794358695e-9,1.2517033919996909e-8,0.5425803190221741,0.8400039270204608],[1,-0.0000037851321605153816,0.000004152462309124887,65.71893138586765]],[11,"Bip001 R Finger22",null,null,null,35,[[38,"Bip001 R Finger2Nub",null,null,null,-47,[1,"b5R8tV+w1bgpY+iWv3wNJH",1,0],[1,0.0380246490240097,0,-9.53674295089968e-9],[3,7.45058148510225e-9,6.93889522739621e-17,1,-1.49011629702045e-8],[1,-1,-1,-1],[1,-179.99999999999997,-179.99999914622626,-0.000001707547496058688]]],[1,"e1Af6agzZbIZMN/insN7Ri",1,0],[1,0.0208807364106178,9.53674295089968e-9,-9.53674295089968e-9],[3,1.4677607668241644e-8,3.4239544753305656e-8,0.49888918124811854,0.8666657861214901],[1,-9.95087267573271e-7,0.000005100006434542559,59.85307198896578]],[3,"Bip001 R Finger3",null,null,null,3,[-48],[1,"0b+Q4dcIZXqaGnbve7s3KE",1,0],[1,0.0305347442626953,0.000674533832352608,-0.0301562827080488],[3,-0.0683387972681987,0.026756855030051926,0.3635999899443759,0.9286597475982722],[1,-11.395977129959034,7.709956491225709,42.195645595023464]],[3,"Bip001 R Finger31",null,null,null,37,[-49],[1,"a3jKMT7/dYZYKHKv8pYp2d",1,0],[1,0.0203019324690104,-9.53674295089968e-9,-9.53674295089968e-9],[3,-3.079989583695688e-8,7.111051273331899e-9,0.529910502580697,0.8480535709816167],[1,-0.000007812531347309599,0.000005842565887283753,63.998816095237586]],[11,"Bip001 R Finger32",null,null,null,38,[[38,"Bip001 R Finger3Nub",null,null,null,-50,[1,"6aBuAWzUZQZaurm3FQ2qQF",1,0],[1,0.0221786499023438,-3.55271359939116e-17,0],[3,-1.4901161193847696e-8,-2.2351743567128294e-8,0.9999999999999998,-2.7183457799317793e-16],[1,-1,-1,-1],[1,179.99999743867886,179.99999829245272,7.016711121317764e-15]]],[1,"25XFpeI29XV7wQmjUm30ns",1,0],[1,0.0187038984149694,-3.55271359939116e-17,9.53674295089968e-9],[3,-1.3831616445734238e-8,9.286661019660313e-9,0.49329241057766593,0.869863551177123],[1,-0.000003708507673114518,0.0000033264431532867247,59.11442572226582]],[11,"Bip001 Head",null,null,null,5,[[32,"Bip001 HeadNub",null,null,null,-51,[1,"a55DXM5r9QY63S2KXsfY4b",1,0],[1,0.054885920137167,3.55271359939116e-17,-4.76837147544984e-9]]],[1,"d5QklFTkVV+7PNq/KhTLYk",1,0],[1,0.0166391897946596,-7.10542719878232e-17,-2.38418573772492e-9],[3,-0.022750339158268098,0.09423584002268655,0.3984314609654997,0.9120605239984351],[1,-9.708715257530967,15.953335360912568,46.26122456500485]],[3,"Bip001 L Thigh",null,null,null,4,[-52],[1,"7cA76yAjpUhqIn+n/RJFqy",1,0],[1,-0.0431545451283455,-0.0108118141070008,0.0373170413076878],[3,0.06541167956450063,0.9600807445650603,0.07996405675507269,-0.2599461977394982],[1,-10.848724664320999,-149.24230466958863,4.820149679760624]],[3,"Bip001 L Calf",null,null,null,41,[-53],[1,"dagVi0wgZYPphieXpp5lAC",1,0],[1,0.0750648453831673,1.19209286886246e-9,-9.53674295089968e-9],[3,3.423756803525913e-18,-3.20972911399078e-17,-0.001423595007462118,0.999998986688114],[1,3.8709870691432216e-16,-3.677531286938343e-15,-0.16313202642815944]],[3,"Bip001 L Foot",null,null,null,42,[-54],[1,"8dLDAhJ4hdmLZzBpOrPh2M",1,0],[1,0.0750648379325867,-2.38418573772492e-9,0],[3,-0.11842504635572153,-0.20643576538263314,-0.0805841294582963,0.9679183753013372],[1,-15.309991177616961,-24.906247445451672,-6.148365390923037]],[11,"Bip001 L Toe0",null,null,null,43,[[38,"Bip001 L Toe0Nub",null,null,null,-55,[1,"9daIG/GJ1ah5e5r3vbLgG+",1,0],[1,0.00225194450467825,-2.38418573772492e-9,0],[3,7.45058059692383e-9,-6.93889349031692e-18,1,-6.12323426292584e-17],[1,-1,-1,-1],[1,180,-179.99999914622634,-7.016709610635247e-15]]],[1,"fdjWnd6BlVPrNsqEvz1vb7",1,0],[1,0.0172649156302214,0.0222191940993071,9.53674295089968e-9],[3,-4.030766393095961e-7,8.590908211653923e-10,0.5735771436742698,0.8191515490153841],[1,-0.00011079050412240398,0.00007769666740395527,70.00009894778422]],[3,"Bip001 R Thigh",null,null,null,4,[-56],[1,"abr21vgc1YzY1iVO6PN/62",1,0],[1,-0.043428897857666,0.00126024358905852,-0.038530096411705],[3,-0.1552416537377325,0.9613926436348152,-0.097720474265699,0.20512172634541165],[1,7.585494357298584,157.2371668150565,-19.790721702136768]],[3,"Bip001 R Calf",null,null,null,45,[-57],[1,"1dbjTX6XFSgo0jEweUlq3P",1,0],[1,0.0750648453831673,4.76837147544984e-9,-9.53674295089968e-9],[3,-2.7775302218409105e-17,-1.3838260982010433e-17,-0.0014235837151987936,0.9999989867041896],[1,-3.185082313099862e-15,-1.5902837428798704e-15,-0.16313073242878895]],[3,"Bip001 R Foot",null,null,null,46,[-58],[1,"61e4XE1HlYkIhwUanQQ3v9",1,0],[1,0.0750648453831673,-9.53674295089968e-9,9.53674295089968e-9],[3,0.3051272107107227,0.24336563628695898,0.06589491821851721,0.918329141490954],[1,33.27426830577247,24.98622723282924,15.636979483491249]],[11,"Bip001 R Toe0",null,null,null,47,[[30,"Bip001 R Toe0Nub",null,null,null,-59,[1,"35uDycQY9ZOazKfA/Qoa0G",1,0],[1,0.00225194450467825,1.33226759977169e-17,-1.77635679969558e-17],[1,4.268868183549643e-7,-3.201651364276759e-7,-0.000001707547293695901]]],[1,"80+xXuD0hctISmU9Lu/Ha0",1,0],[1,0.0172649212181568,0.0222191847860813,-9.53674295089968e-9],[3,-1.025908223036517e-7,6.857654548949146e-8,0.5735772116746168,0.819151501401027],[1,-0.00004133496642278452,0.00003853632446711282,70.00010846040539]],[3,"Bone001",null,null,null,8,[-60],[1,"e39aamolpRBrwgbhU4o3xX",1,0],[1,-0.00631641363725066,-0.00489539839327335,-0.00203654286451638],[3,-0.12914489560984285,0.7267618973079767,0.674523550740678,0.01251878809712972],[1,-86.70225691112807,168.73836723357556,-9.835891162857164]],[3,"Bone002",null,null,null,49,[-61],[1,"a0BSmAbqtc46ir8V9Zgs+Q",1,0],[1,0.0276419539004564,0,9.53674295089968e-9],[3,0.0011972418127110872,-0.08623794350534224,0.053540221628325356,0.9948341712969057],[1,0.6693863757829414,-9.94437150747774,6.10326817927104]],[11,"Bone003",null,null,null,50,[[32,"Bone004",null,null,null,-62,[1,"76m4Yj4htdU7KaY8qOG1KM",1,0],[1,0.045284628868103,4.76837147544984e-9,7.15255721317476e-9]]],[1,"b4UhFs8LBaYLEck/UtiUxG",1,0],[1,0.0207554437220097,-2.38418573772492e-9,-8.88178399847791e-18],[3,-0.002221933358718709,-0.08005519303223425,0.023198472602333608,0.9965179677003521],[1,-0.04095805906745343,-9.185021992421438,2.67044265449598]],[68,"hellFire",null,null,null,6,[[76,-63,[8,"31lBlkWjdaFZSgDSojWJwr"],[0],[28],1,1,2]],[1,"22TGI7m1FTnLt5aQsntTua",1,0],[3,-0.7071067215818962,9.48304064849755e-8,1.0536709463188116e-8,0.7071068407911872],[1,-89.99999034065321,0.000008537736606451365,-0.000006830188450335313]]],0,[0,7,1,0,4,1,0,-1,6,0,-1,13,0,-2,16,0,-3,19,0,-4,22,0,-1,28,0,-2,31,0,-3,34,0,-4,37,0,-1,9,0,-2,41,0,-3,45,0,-1,10,0,-2,25,0,-3,40,0,-1,7,0,-2,52,0,0,7,0,-2,8,0,-2,49,0,-1,11,0,-1,12,0,-1,14,0,-1,15,0,0,15,0,-1,17,0,-1,18,0,0,18,0,-1,20,0,-1,21,0,0,21,0,-1,23,0,-1,24,0,0,24,0,-1,26,0,-1,27,0,-1,29,0,-1,30,0,0,30,0,-1,32,0,-1,33,0,0,33,0,-1,35,0,-1,36,0,0,36,0,-1,38,0,-1,39,0,0,39,0,0,40,0,-1,42,0,-1,43,0,-1,44,0,0,44,0,-1,46,0,-1,47,0,-1,48,0,0,48,0,-1,50,0,-1,51,0,0,51,0,4,52,0,9,1,2,0,12,3,0,27,4,0,8,5,0,9,63],[0,0,0,0,0,0,0,0,0,0],[-1,3,14,-1,-2,-3,-4,-5,-6,15],[40,41,42,21,43,44,45,46,47,21]],[[[77,"DefaultMaterial",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{}],[[[{"metallic":0.200000002980232,"roughness":0.800000011920929},"albedoScale",8,[1,0.5,0.5,0.5]]],11]]],0,0,[0],[5],[14]],[[[29,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[48,22]],[[[29,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{"USE_OUTLINE_PASS":true,"USE_INSTANCING":true},{"USE_INSTANCING":true,"USE_BASE_COLOR_MAP":true,"USE_1ST_SHADE_MAP":true,"USE_2ND_SHADE_MAP":true,"USE_SPECULAR_MAP":true},{},{}],[[[{"lineWidth":2},"baseColor",8,[4,4278201436],"baseColorMap",6,0],[{"baseStep":1},"mainColor",8,[4,4284111450],"shadeColor1",8,[4,4284111450],"shadeColor2",8,[4,4183448154],"specular",8,[4,5921370],"mainTexture",6,1,"shadeMap1",6,2,"shadeMap2",6,3,"specularMap",6,4],{},{}],11,11,0,0]]],0,0,[0,0,0,0,0,0],[16,6,12,13,17,5],[8,8,8,8,8,13]],[[[29,[{"priority":129,"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[5,1]],[[[42,".bin",815874718,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1824,"length":432,"count":108,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1824,"count":38,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6751065850257874,-0.6648502349853516,0],"maxPosition",8,[1,0.6751065850257874,0.6648502349853516,0.7306054830551147]]],-1],0,0,[],[],[]],[[[109,"tone-shader"],[110,"effect",null,null,null,[-6,-7,-8,-9,-10,-11,-12],[89,"dfb9aa98-c561-4c0d-84a4-3c7dc8990040",[-1,-2,-3,-4,-5]],[111,[112,20,[4,4278190080],[4,4278190080]],[113,1,true,true,2,1,1,50,30,50,15,1,[4,4283190348],[0,1024,1024]],[114],[115]]],[50,0,null,1,[51,"f35wt18cxHup+63iqdCCaM",-14,[63,"f3m6V7ar1JAIWvtR9PgGUV",null,[[21,"role01",["name"],[7,["f35wt18cxHup+63iqdCCaM"]]],[23,["rotation"],[7,["f35wt18cxHup+63iqdCCaM"]],[3,0,0,0,1]],[23,["scale"],[7,["f35wt18cxHup+63iqdCCaM"]],[1,4,4,4]],[21,true,["_active"],[7,["f35wt18cxHup+63iqdCCaM"]]],[23,["_lpos"],[7,["f35wt18cxHup+63iqdCCaM"]],[1,-14.601,1.762,-0.642]],[23,["_lscale"],[7,["f35wt18cxHup+63iqdCCaM"]],[1,4,4,4]],[21,1,["_shadowCastingMode"],[7,["3anl9kHaJdbrSPUzVZRZXa"]]],[64,["_skinningRoot"],[7,["3anl9kHaJdbrSPUzVZRZXa"]],-13],[21,1,["_shadowReceivingMode"],[7,["3anl9kHaJdbrSPUzVZRZXa"]]]]],2]],[50,0,null,1,[51,"f35wt18cxHup+63iqdCCaM",-20,[116,"21l5cK2OpPJZ0A4Ck8e8nt",[[21,"role01",["name"],[7,["f35wt18cxHup+63iqdCCaM"]]],[23,["rotation"],[7,["f35wt18cxHup+63iqdCCaM"]],[3,0,0,0,1]],[23,["scale"],[7,["f35wt18cxHup+63iqdCCaM"]],[1,4,4,4]],[21,true,["_active"],[7,["f35wt18cxHup+63iqdCCaM"]]],[23,["_lpos"],[7,["f35wt18cxHup+63iqdCCaM"]],[1,10.104,1.614,-0.642]],[65,["_lscale"],-15,[1,4,4,4]],[21,1,["_shadowCastingMode"],[7,["3anl9kHaJdbrSPUzVZRZXa"]]],[64,["_skinningRoot"],[7,["3anl9kHaJdbrSPUzVZRZXa"]],-16],[21,1,["_shadowReceivingMode"],[7,["3anl9kHaJdbrSPUzVZRZXa"]]],[118,"role02",["_name"],-17],[65,["_lrot"],-18,[3,0,0,0,1]],[65,["_euler"],-19,[1,0,0,0]]]],3]],[7,["f35wt18cxHup+63iqdCCaM"]],[50,0,{},1,[51,"ecVHJiD7VWeqYR2feA2ibi",-22,[63,"77VUaYgmJKkYH/pL5Ux4sT",null,[[23,["_lpos"],[7,["ecVHJiD7VWeqYR2feA2ibi"]],[1,-0.457,2.013,0.498]],[21,"hellFireAll",["_name"],[7,["ecVHJiD7VWeqYR2feA2ibi"]]],[23,["_lrot"],[7,["ecVHJiD7VWeqYR2feA2ibi"]],[3,0,-0.2609173263819299,0,0.9653611494118175]],[23,["_euler"],[7,["ecVHJiD7VWeqYR2feA2ibi"]],[1,0,-30.249,0]],[23,["_lscale"],[7,["ecVHJiD7VWeqYR2feA2ibi"]],[1,10,10,10]],[119,["_materials","0"],[7,["31lBlkWjdaFZSgDSojWJwr"]],5],[64,["_skinningRoot"],[7,["31lBlkWjdaFZSgDSojWJwr"]],-21],[21,1,["_shadowCastingMode"],[7,["31lBlkWjdaFZSgDSojWJwr"]]],[23,["_lpos"],[7,["f8sH3ZrX1e+5Upd2khNnpv"]],[1,0,0,0]]]],4]],[50,0,null,1,[51,"55NZW8yfVI8rnmACclnsfy",-23,[117,"16Dke/zPxFErPu8ix7g749",null,[[21,"an",["name"],[7,["55NZW8yfVI8rnmACclnsfy"]]],[23,["position"],[7,["55NZW8yfVI8rnmACclnsfy"]],[1,0,0,0]],[23,["rotation"],[7,["55NZW8yfVI8rnmACclnsfy"]],[3,0,0,0,1]],[21,true,["_active"],[7,["55NZW8yfVI8rnmACclnsfy"]]],[21,true,["_enabled"],[7,["6csxinnChLgapQG1mlhi8e"]]],[21,true,["_active"],[7,["8aE4UsonpLbqsb1BVBgZbw"]]],[21,true,["_active"],[7,["97JJbnvqFGR49YfUbvyY0V"]]]],[[7,["6csxinnChLgapQG1mlhi8e"]]]],0]],[50,0,null,1,[51,"d79fUWNjVKoKq5Y/UXP+V9",-24,[63,"3fS/AUh5hIjb1KZr5Bz4JV",null,[[21,"skyBox",["name"],[7,["d79fUWNjVKoKq5Y/UXP+V9"]]],[23,["position"],[7,["d79fUWNjVKoKq5Y/UXP+V9"]],[1,0,0,0]],[23,["rotation"],[7,["d79fUWNjVKoKq5Y/UXP+V9"]],[3,0,0,0,1]],[21,true,["_active"],[7,["d79fUWNjVKoKq5Y/UXP+V9"]]]]],1]],[69,"Main Light",null,null,null,"c0y6F5f+pAvI805TdmxIjx",1,[[120,160000,-25,[121]]],[1,-8.829,10.038,14.979],[3,-0.24999999999999997,-0.24999999999999997,-0.06698729810778066,0.9330127018922194],[1,-30,-30,0]],[69,"Main Camera",null,null,null,"aep41QuqFKuaO1OMdKWlp5",1,[[122,7,1822425087,-26]],[1,-18.427,23.81,18.355],[3,-0.3535533905932738,-0.3535533905932738,-0.14644660940672624,0.8535533905932737],[1,-45,-45,0]]],0,[0,-1,6,0,-2,7,0,-3,2,0,-4,3,0,-5,5,0,-1,8,0,-2,9,0,-3,6,0,-4,7,0,-5,2,0,-6,3,0,-7,5,0,10,2,0,7,2,0,11,4,0,10,3,0,11,4,0,11,4,0,11,4,0,7,3,0,10,5,0,7,5,0,7,6,0,7,7,0,4,8,0,4,9,0,18,1,26],[0,0,0,0,0,0],[8,8,8,8,8,10],[49,50,23,23,51,52]],[[[42,".bin",2652022478,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":554880,"length":37968,"count":18984,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":554880,"count":11560,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-12.20370864868164,-29.7546443939209,-5.639307498931885],"maxPosition",8,[1,13.133393287658691,4.906680107116699,3.5973434448242188]]],-1],0,0,[],[],[]],[[[42,".bin",290055054,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":57168,"length":4332,"count":2166,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":57168,"count":1191,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-25.564788818359375,-0.06236686557531357,-3.4806551933288574],"maxPosition",8,[1,3.4334259033203125,22.158281326293945,1.5841262340545654]]],-1],0,0,[],[],[]],[[[42,".bin",533305146,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4512,"length":336,"count":168,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4512,"count":94,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4139062464237213,-0.4465063512325287,-2.048863410949707],"maxPosition",8,[1,0.4139062464237213,0.4465014636516571,2.048863410949707]]],-1],0,0,[],[],[]],[[[123,"builtin-toon",[{"hash":4088398850,"name":"builtin-toon|outline-vs:vert|outline-fs:frag","blocks":[{"name":"OutlineVert","stageFlags":1,"binding":0,"members":[{"name":"outlineParams","type":16,"count":1}],"defines":[]},{"name":"OutlineFrag","stageFlags":16,"binding":1,"members":[{"name":"baseColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(set = 1, binding = 0) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nlayout(location = 0) in vec2 v_uv;\nlayout(set = 1, binding = 1) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 2) uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nout vec2 v_uv;\nlayout(std140) uniform OutlineVert {\n  vec4 outlineParams;\n};\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nin vec2 v_uv;\nlayout(std140) uniform OutlineFrag {\n  vec4 baseColor;\n};\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n#endif\nvarying vec2 v_uv;\n   uniform vec4 outlineParams;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    #else\n      matWorld = cc_matWorld;\n    #endif\n  float width = outlineParams.x * 0.001;\n  #if USE_POSITION_SCALING\n    vec3 dir = normalize(In.position.xyz);\n    float flip = dot(dir, normalize(In.normal)) < 0.0 ? -1.0 : 1.0;\n    In.position.xyz += flip * dir * width * 2.0;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #else\n    In.position.xyz += normalize(In.normal) * width;\n    vec4 pos = cc_matProj * (cc_matView * matWorld) * In.position;\n  #endif\n  pos.z -= outlineParams.y * 0.002;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitColor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n  #endif\n  return color;\n}\nvarying vec2 v_uv;\n   uniform vec4 baseColor;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvec4 frag () {\n  vec4 color = baseColor * cc_mainLitColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 texColor = texture2D(baseColorMap, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    color *= texColor;\n  #endif\n  return CCFragOutput(vec4(color.rgb, 1.0));\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":197,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"USE_POSITION_SCALING","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]}]},{"hash":2068748630,"name":"builtin-toon|toon-vs:vert|toon-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"shadeMap1","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_1ST_SHADE_MAP"]},{"name":"shadeMap2","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_2ND_SHADE_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_SPECULAR_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_shadowPos","type":16,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_position","type":15,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":2,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":1,"location":3,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":1,"location":4,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":1,"location":5,"defines":["USE_NORMAL_MAP"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(location = 0) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 1) out vec3 v_position;\nlayout(location = 2) out vec2 v_uv;\nlayout(location = 3) out vec3 v_normal;\n#if USE_NORMAL_MAP\n  layout(location = 4) out vec3 v_tangent;\n  layout(location = 5) out vec3 v_bitangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  vec3 position;\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    layout(location = 0) in highp vec4 v_shadowPos;\n    layout(set = 0, binding = 2) uniform CCShadow {\n      highp mat4 cc_matLightPlaneProj;\n      highp mat4 cc_matLightView;\n      highp mat4 cc_matLightViewProj;\n      highp vec4 cc_shadowInvProjDepthInfo;\n      highp vec4 cc_shadowProjDepthInfo;\n      highp vec4 cc_shadowProjInfo;\n      lowp  vec4 cc_shadowNFLSInfo;\n      lowp  vec4 cc_shadowWHPBInfo;\n      lowp  vec4 cc_shadowLPNNInfo;\n      lowp  vec4 cc_shadowColor;\n    };\n    #if CC_RECEIVE_SHADOW\n      layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n      layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(cc_shadowLPNNInfo.z > 0.0001)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW && CC_ENABLE_DIR_SHADOW\n      NL = max(dot(N, L), 0.0);\n      if (NL > 0.0) {\n                {\n                  vec4 pos = ApplyShadowDepthBias_FaceNormal(v_shadowPos, N);\n                  float pcf = cc_shadowWHPBInfo.z;\n                  if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n                  else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n                  else shadow = CCGetShadowFactorHard(pos);\n                  shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n                }\n      }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    #if CC_USE_HDR\n      s.emissive *= cc_exposure.w;\n    #endif\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nlayout(location = 1) in vec3 v_position;\nlayout(location = 2) in vec2 v_uv;\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 1) uniform sampler2D baseColorMap;\n#endif\nlayout(location = 3) in vec3 v_normal;\n#if USE_NORMAL_MAP\n  layout(location = 4) in vec3 v_tangent;\n  layout(location = 5) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  layout(set = 1, binding = 3) uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  layout(set = 1, binding = 4) uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  layout(set = 1, binding = 5) uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\nout vec3 v_position;\nout vec2 v_uv;\nout vec3 v_normal;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  vec3 position;\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    in highp vec4 v_shadowPos;\n    layout(std140) uniform CCShadow {\n      highp mat4 cc_matLightPlaneProj;\n      highp mat4 cc_matLightView;\n      highp mat4 cc_matLightViewProj;\n      highp vec4 cc_shadowInvProjDepthInfo;\n      highp vec4 cc_shadowProjDepthInfo;\n      highp vec4 cc_shadowProjInfo;\n      lowp  vec4 cc_shadowNFLSInfo;\n      lowp  vec4 cc_shadowWHPBInfo;\n      lowp  vec4 cc_shadowLPNNInfo;\n      lowp  vec4 cc_shadowColor;\n    };\n    #if CC_RECEIVE_SHADOW\n      uniform sampler2D cc_shadowMap;\n      uniform sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(cc_shadowLPNNInfo.z > 0.0001)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW && CC_ENABLE_DIR_SHADOW\n      NL = max(dot(N, L), 0.0);\n      if (NL > 0.0) {\n                {\n                  vec4 pos = ApplyShadowDepthBias_FaceNormal(v_shadowPos, N);\n                  float pcf = cc_shadowWHPBInfo.z;\n                  if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n                  else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n                  else shadow = CCGetShadowFactorHard(pos);\n                  shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n                }\n      }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    #if CC_USE_HDR\n      s.emissive *= cc_exposure.w;\n    #endif\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nin vec3 v_position;\nin vec2 v_uv;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nin vec3 v_normal;\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, v_uv).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  v_normal = (matWorldIT * vec4(In.normal, 0.0)).xyz;\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\nstruct ToonSurface {\n  vec4 baseColor;\n  vec4 specular;\n  vec3 position;\n  vec3 normal;\n  vec3 shade1;\n  vec3 shade2;\n  vec3 emissive;\n  float baseStep;\n  float baseFeather;\n  float shadeStep;\n  float shadeFeather;\n};\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    vec3 N = normalize(s.normal);\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    vec3 finalColor = vec3(0.0);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = 0.5 * dot(N, SL) + 0.5;\n      float SNH = 0.5 * dot(N, SH) + 0.5;\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr , distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 diffuse = mix(s.shade1, s.shade2,\n        clamp(1.0 + (s.shadeStep - s.shadeFeather - SNL) / s.shadeFeather, 0.0, 1.0));\n      diffuse = mix(s.baseColor.rgb, diffuse,\n        clamp(1.0 + (s.baseStep - s.baseFeather - SNL) / s.baseFeather, 0.0, 1.0));\n      float specularMask = step(specularWeight, SNH);\n      vec3 specular = s.specular.rgb * specularMask;\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      finalColor += SNL * cc_lightColor[i].rgb * cc_lightColor[i].a * illum * att * s.baseStep * (diffuse + specular);\n    }\n    return vec4(finalColor, 0.0);\n  }\n#else\n  #if CC_RECEIVE_SHADOW\n    varying highp vec4 v_shadowPos;\n    uniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform lowp vec4 cc_shadowNFLSInfo;\n  uniform lowp vec4 cc_shadowWHPBInfo;\n  uniform lowp vec4 cc_shadowLPNNInfo;\n    #if CC_RECEIVE_SHADOW\n      uniform sampler2D cc_shadowMap;\n      uniform sampler2D cc_spotLightingMap;\n      vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal)\n      {\n        vec4 newShadowPos = shadowPos;\n        if(cc_shadowLPNNInfo.z > 0.0001)\n        {\n          vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n          if(viewNormal.z < 0.1)\n            newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * cc_shadowLPNNInfo.z * clamp(viewNormal.z, 0.001, 0.1);\n        }\n        return newShadowPos;\n      }\n      vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n      {\n        float coeffA = cc_shadowProjDepthInfo.x;\n        float coeffB = cc_shadowProjDepthInfo.y;\n        float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n        viewSpacePos_z += viewspaceDepthBias;\n        vec4 result = shadowPos;\n        result.z = viewSpacePos_z * coeffA + coeffB;\n        return result;\n      }\n      float CCGetShadowFactorHard (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float shadow = 0.0;\n        float closestDepth = 0.0;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n        } else {\n          closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n        }\n        shadow = step(clipPos.z, closestDepth);\n        return shadow;\n      }\n      float CCGetShadowFactorSoft (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        vec2 clipPos_offset = clipPos.xy + oneTap;\n        float block0, block1, block2, block3;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n          block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n          block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n        }\n        float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block2, block3, coefX);\n        float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n        return mix(resultX, resultY, coefY);\n      }\n      float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n        vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, cc_shadowWHPBInfo.w);\n        vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n        if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n            clipPos.y < 0.0 || clipPos.y > 1.0 ||\n            clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n        clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n        float offsetDepth = clipPos.z;\n        vec2 mapSize = cc_shadowWHPBInfo.xy;\n        vec2 oneTap = 1.0 / mapSize;\n        float clipPos_offset_L = clipPos.x - oneTap.x;\n        float clipPos_offset_R = clipPos.x + oneTap.x;\n        float clipPos_offset_U = clipPos.y - oneTap.y;\n        float clipPos_offset_D = clipPos.y + oneTap.y;\n        float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n        if (cc_shadowLPNNInfo.y > 0.000001) {\n          block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n          block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        } else {\n          block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n          block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n          block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n          block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n          block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n          block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n          block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n          block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n          block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n        }\n        float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n        float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n        float shadow = 0.0;\n        float resultX = mix(block0, block1, coefX);\n        float resultY = mix(block3, block4, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block1, block2, coefX);\n        resultY = mix(block4, block5, coefX);\n        shadow += mix(resultX , resultY, coefY);\n        resultX = mix(block3, block4, coefX);\n        resultY = mix(block6, block7, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        resultX = mix(block4, block5, coefX);\n        resultY = mix(block7, block8, coefX);\n        shadow += mix(resultX, resultY, coefY);\n        return shadow * 0.25;\n      }\n    #endif\n  #endif\n  vec4 CCToonShading (ToonSurface s) {\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    vec3 N = normalize(s.normal);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    float NL = 0.5 * dot(N, L) + 0.5;\n    float NH = 0.5 * dot(normalize(V + L), N) + 0.5;\n    vec3 lightColor = cc_mainLitColor.rgb * cc_mainLitColor.w * s.baseStep;\n    vec3 diffuse = mix(s.shade1, s.shade2,\n      clamp(1.0 + (s.shadeStep - s.shadeFeather - NL) / s.shadeFeather, 0.0, 1.0));\n    diffuse = mix(s.baseColor.rgb, diffuse,\n      clamp(1.0 + (s.baseStep - s.baseFeather - NL) / s.baseFeather, 0.0, 1.0));\n    float specularWeight = 1.0 - pow(s.specular.a, 5.0);\n    float specularMask = step(specularWeight, NH);\n    vec3 specular = s.specular.rgb * specularMask;\n    vec3 dirlightContrib = diffuse + specular;\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW && CC_ENABLE_DIR_SHADOW\n      NL = max(dot(N, L), 0.0);\n      if (NL > 0.0) {\n                {\n                  vec4 pos = ApplyShadowDepthBias_FaceNormal(v_shadowPos, N);\n                  float pcf = cc_shadowWHPBInfo.z;\n                  if (pcf > 1.9) shadow = CCGetShadowFactorSoft2X(pos);\n                  else if (pcf > 0.9) shadow = CCGetShadowFactorSoft(pos);\n                  else shadow = CCGetShadowFactorHard(pos);\n                  shadow = mix(shadow, 1.0, cc_shadowNFLSInfo.w);\n                }\n      }\n    #endif\n    dirlightContrib *= shadow;\n    vec3 finalColor = lightColor * dirlightContrib;\n    #if CC_USE_HDR\n      s.emissive *= cc_exposure.w;\n    #endif\n    finalColor += s.emissive;\n    return vec4(finalColor, s.baseColor.a);\n  }\n#endif\n    uniform vec4 baseColor;\n    uniform vec4 colorScaleAndCutoff;\n    uniform vec4 shadeColor1;\n    uniform vec4 shadeColor2;\n    uniform vec4 specular;\n    uniform vec4 shadeParams;\n    uniform vec4 emissive;\n    uniform vec4 emissiveScaleAndStrenth;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\nvarying vec3 v_normal;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_1ST_SHADE_MAP\n  uniform sampler2D shadeMap1;\n#endif\n#if USE_2ND_SHADE_MAP\n  uniform sampler2D shadeMap2;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out ToonSurface s) {\n  s.shade2 = shadeColor2.rgb * colorScaleAndCutoff.rgb;\n  #if USE_2ND_SHADE_MAP\n    s.shade2 *= SRGBToLinear(texture2D(shadeMap2, v_uv).rgb);\n  #endif\n  s.shade1 = shadeColor1.rgb * colorScaleAndCutoff.rgb;\n  #if USE_1ST_SHADE_MAP\n    s.shade1 *= SRGBToLinear(texture2D(shadeMap1, v_uv).rgb);\n    #if SHADE_MAP_1_AS_SHADE_MAP_2\n      s.shade2 *= s.shade1.rgb;\n    #endif\n  #endif\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    vec4 baseColorMap = texture2D(baseColorMap, v_uv);\n    baseColorMap.rgb = SRGBToLinear(baseColorMap.rgb);\n    baseColor *= baseColorMap;\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_1\n      s.shade1 *= baseColorMap.rgb;\n    #endif\n    #if BASE_COLOR_MAP_AS_SHADE_MAP_2\n      s.shade2 *= baseColorMap.rgb;\n    #endif\n  #endif\n  s.baseColor = baseColor;\n  s.baseColor.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, v_uv).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * emissiveScaleAndStrenth.w) * normalize(v_tangent) +\n      (nmmp.y * emissiveScaleAndStrenth.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  s.specular = specular;\n  #if USE_SPECULAR_MAP\n    s.specular.rgb *= SRGBToLinear(texture2D(specularMap, v_uv).rgb);\n  #endif\n  s.emissive = emissive.rgb * emissiveScaleAndStrenth.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, v_uv).rgb);\n  #endif\n  s.baseStep = shadeParams.x;\n  s.baseFeather = shadeParams.y;\n  s.shadeStep = shadeParams.z;\n  s.shadeFeather = shadeParams.w;\n}\nvec4 frag () {\n  ToonSurface s; surf(s);\n  vec4 color = CCToonShading(s);\n  return CCFragOutput(color);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":224,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":67}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]},{"name":"CC_ENABLE_DIR_SHADOW","type":"boolean","defines":["CC_RECEIVE_SHADOW","!CC_FORWARD_ADD"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]},{"name":"USE_1ST_SHADE_MAP","type":"boolean","defines":[]},{"name":"USE_2ND_SHADE_MAP","type":"boolean","defines":[]},{"name":"USE_SPECULAR_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]},{"name":"SHADE_MAP_1_AS_SHADE_MAP_2","type":"boolean","defines":["USE_1ST_SHADE_MAP"]},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_1","type":"boolean","defines":["USE_BASE_COLOR_MAP"]},{"name":"BASE_COLOR_MAP_AS_SHADE_MAP_2","type":"boolean","defines":["USE_BASE_COLOR_MAP"]}]},{"hash":3207428340,"name":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"baseColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1},{"name":"shadeColor1","type":16,"count":1},{"name":"shadeColor2","type":16,"count":1},{"name":"specular","type":16,"count":1},{"name":"shadeParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleAndStrenth","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"baseColorMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_BASE_COLOR_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_vertexId","format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":1,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec4 v_worldPos;\nlayout(location = 2) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec4 v_worldPos;\nlayout(location = 2) in float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  layout(set = 1, binding = 1) uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nout vec2 v_uv;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 baseColor;\n  vec4 colorScaleAndCutoff;\n  vec4 shadeColor1;\n  vec4 shadeColor2;\n  vec4 specular;\n  vec4 shadeParams;\n  vec4 emissive;\n  vec4 emissiveScaleAndStrenth;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 baseColor;\n   uniform vec4 colorScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform lowp vec4 cc_shadowNFLSInfo;\n  uniform lowp vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_BASE_COLOR_MAP\n  uniform sampler2D baseColorMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = baseColor;\n  #if USE_BASE_COLOR_MAP\n    baseColor *= texture2D(baseColorMap, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":185,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":67}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_BASE_COLOR_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}]}],[{"passes":[{"program":"builtin-toon|outline-vs:vert|outline-fs:frag","switch":"USE_OUTLINE_PASS","rasterizerState":{"cullMode":1},"properties":{"lineWidth":{"type":13,"value":[10],"handleInfo":["outlineParams",0,13]},"depthBias":{"type":13,"value":[0],"handleInfo":["outlineParams",1,13]},"baseColor":{"type":16,"editor":{"type":"color"}},"baseColorMap":{"value":"grey","type":28},"outlineParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[10,0,0,0]}}},{"program":"builtin-toon|toon-vs:vert|toon-fs:frag","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":1,"program":"builtin-toon|toon-vs:vert|toon-fs:frag","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["emissiveScaleAndStrenth",3,13]},"normalMap":{"value":"normal","type":28},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"shadeMap1":{"value":"white","type":28},"shadeMap2":{"value":"white","type":28},"specularMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":1,"program":"builtin-toon|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.6,0.6,0.6,1],"editor":{"displayName":"BaseColor","type":"color"},"handleInfo":["baseColor",0,16]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"shadeColor1":{"type":16,"value":[0.4,0.4,0.4,1],"editor":{"type":"color"}},"shadeColor2":{"type":16,"value":[0.2,0.2,0.2,1],"editor":{"type":"color"}},"specular":{"type":16,"value":[1,1,1,0.3],"editor":{"type":"color"}},"baseStep":{"type":13,"value":[0.8],"handleInfo":["shadeParams",0,13]},"baseFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",1,13]},"shadeStep":{"type":13,"value":[0.5],"handleInfo":["shadeParams",2,13]},"shadeFeather":{"type":13,"value":[0.001],"handleInfo":["shadeParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleAndStrenth",0,15]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["emissiveScaleAndStrenth",3,13]},"mainTexture":{"value":"white","type":28,"editor":{"displayName":"BaseColorMap"},"handleInfo":["baseColorMap",0,28]},"baseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.6,0.6,0.6,1]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"shadeParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0.8,0.001,0.5,0.001]},"emissiveScaleAndStrenth":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"baseColorMap":{"type":28,"value":"white","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[29,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,2161563350],"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[19,1]],[[[42,".bin",3144817543,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26832,"length":5760,"count":2880,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":26832,"count":559,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-138.77093505859375,-138.77093505859375,-138.77093505859375],"maxPosition",8,[1,138.77093505859375,138.77093505859375,138.77093505859375]]],-1],0,0,[],[],[]],[[[29,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[53,22]],[[[29,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{"USE_BASE_COLOR_MAP":true,"USE_1ST_SHADE_MAP":true,"USE_2ND_SHADE_MAP":true,"USE_SPECULAR_MAP":true},{},{}],[[[{},"baseColorMap",6,0],[{},"mainColor",8,[4,4282466625],"shadeColor1",8,[4,4282137660],"shadeColor2",8,[4,4282795590],"specular",8,[4,5921370],"mainTexture",6,1,"shadeMap1",6,2,"shadeMap2",6,3,"specularMap",6,4],{},{}],11,11,0,0]]],0,0,[0,0,0,0,0,0],[16,6,12,13,17,5],[9,9,9,9,9,13]],[[[57,"role01"],[84,"role01",null,null,null,[-3],[[75,-2,[8,"282GzBKvJJ+5aQXfFjW0fY"],[3],4]],[1,"f35wt18cxHup+63iqdCCaM",-1,0],[1,2,2,2]],[85,"Bip001 Pelvis",null,null,null,[-4,-5,-6,-7,-8],[1,"2bJp0bCvJIvpDDrWHfrTGG",1,0],[3,-0.41188171100388316,-0.5147662708143204,-0.4834640574536997,0.5758746805710746],[1,-78.75771397844046,-89.85222129496063,-7.630486924094422]],[88,"Bip001 Head",null,null,null,[[[32,"Bip001 HeadNub",null,null,null,-9,[1,"02OetJ7zpMsqJY8RfeU2AO",1,0],[1,0.135930821299553,-2.38418573772492e-9,8.32667249857304e-19]],-10,-11,-12],4,1,1,1],[1,"b1NstqRuNM66/6HNH38780",1,0],[1,0.0129182813689113,1.77635679969558e-17,4.76837147544984e-9],[3,0.3559750324072336,-0.053677298212219435,-0.21076545152117085,0.9088335647435029],[1,43.51214722523949,3.317809274738588,-24.91776247669051]],[3,"Bip001 Spine",null,null,null,2,[-13,-14,-15],[1,"51oLFnvwdJLbqmUuoUJA7F",1,0],[1,0.0206464007496834,0.000459729431895539,0.00273958081379533],[3,-0.2682870387474789,-0.0506546992781517,0.16400951508054978,0.947922489048652],[1,-31.52066107625393,-0.48889624844361557,19.762169495502985]],[36,"Bip001 Neck",null,null,null,[-16,-17,3],[1,"7574n6vdNHhpc7fW4lymbO",1,0],[1,0.06485465914011,-0.00720170000568032,-7.15255721317476e-9],[3,0.006708406793550155,-0.04889848419563443,0.13654124635638185,0.9894040749689215],[1,1.5845054450062264,-5.876335477710025,15.636471748776113]],[36,"Bip001 L Hand",null,null,null,[-18,-19,-20],[1,"f7mXn48JFCFayMZW7ELaVP",1,0],[1,0.0477479733526707,0,1.90734859017994e-8],[3,-0.5294900446039947,0.0490852623239158,0.07881113007075932,0.8432198618775663],[1,-64.64262464718085,9.600993603361276,4.642018691273672]],[54,"gongjian",null,null,null,6,[[-21,-22,[32,"gongjian_la",null,null,null,-23,[1,"9eZV3SwQ5DEYNYzus1fLOY",1,0],[1,-0.0612875334918499,0.000164525510626845,-0.000146636957651936]]],1,1,4],[1,"146AdNhFBL+ZFvhjqfehPR",1,0],[1,0.0219213478267193,0.00943145714700222,-0.000834126432891935],[3,-0.6830571674254313,0.23082719014591663,-0.20206187027606837,0.6628142386058287],[1,-91.04338711627624,2.11303070546733,-35.67559847940418]],[45,"RootNode",null,null,null,1,[-24,-25],[1,"d63735IgpJxb49f8CTWJqF",1,0]],[54,"Bip001",null,null,null,8,[[[58,"Bip001 Footsteps",null,null,null,-26,[1,"dc36hEwmBIN47RplYe+pMF",1,0],[1,0.00578802870586514,0.0344484522938728,-0.181434854865074],[3,0.05357651611095823,-0.07839910431516688,0.7174669867307766,0.6900900378323479],[1,100.70887499921847,-102.72951374421514,79.0619560316228]],2],4,1],[1,"3b/XFWlXdCQpS7W60l2/uU",1,0],[1,-0.00329751730896533,0.192917972803116,-0.00498224701732397],[3,0.5258516621262591,0.4518892425763995,0.5627623149035792,-0.4500830132399396],[1,-100.75060063529376,-92.3974479605488,-1.7951469034733716]],[54,"Bip001 Spine1",null,null,null,4,[[5,[58,"jiantong",null,null,null,-27,[1,"45ZH7R+LdGCpT2bPpRKC79",1,0],[1,0.0268347933888435,-0.045480340719223,-0.00330258952453732],[3,0.7107517879682136,0.7034428874469623,2.3353869055005843e-7,-4.617560127450711e-7],[1,-179.9945402142028,-0.005441293450126157,89.40776834555899]]],1,4],[1,"71baK5/1VBbau/gMzpjQqz",1,0],[1,0.0416589342057705,-0.0000406074505008291,0.000014715194083692],[3,-0.17596529771862365,0.1570103348521229,0.006703403445158616,0.9717710806206737],[1,-20.145674291905873,17.92608948364998,-2.4202283889384564]],[36,"Bip001 L UpperArm",null,null,null,[-28,-29],[1,"130bMFJ+dGe5ll1GQGbJyl",1,0],[1,0.0327766798436642,0,0],[3,-0.11273205739824561,0.22350200444598922,-0.05098458995426971,0.9668189638347908],[1,-11.384695030276903,25.177519198400017,-8.567671121148008]],[36,"Bip001 R UpperArm",null,null,null,[-30,-31],[1,"97P2CDv3tE354Gfw84zRjG",1,0],[1,0.0327766947448254,0,0],[3,-0.1634690773856848,-0.3457701530227791,-0.23175117547712387,0.8944340415493187],[1,-28.34552184959575,-46.73549476501521,-17.549330884336477]],[36,"Bip001 R Hand",null,null,null,[-32,-33],[1,"7c1UbtYy1AcLj8CvExqC3n",1,0],[1,0.0477479547262192,0,3.55271359939116e-17],[3,0.8284742991230722,0.05632721368324538,-0.08340465437550017,0.5509094701670317],[1,112.74636159813639,11.552153127868277,0.08218909658081684]],[68,"role01",null,null,null,8,[[76,-34,[8,"3anl9kHaJdbrSPUzVZRZXa"],[0],[28],1,1,2]],[1,"8coNBHfhNGH5dF5S6/NXgO",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[3,"Bip001 L Clavicle",null,null,null,5,[11],[1,"e9X1r+OXdLwL8I9HCeeSk/",1,0],[1,-0.00955802854150534,0.00615513790398836,0.0138386720791459],[3,0.5661953293859575,0.0081105337581238,0.8085269024681724,0.16012906110043884],[1,169.94422904616937,-108.61772347055353,15.552521643044653]],[3,"Bip001 L Forearm",null,null,null,11,[6],[1,"8baOLtHd5Msp8OlAa/xQ1l",1,0],[1,0.0550516210496426,3.27825544488292e-9,0],[3,-4.80981531306105e-17,-1.379408024766704e-17,-0.303828414050541,0.9527267681846316],[1,-7.029078765924762e-15,-3.900718588689058e-15,-35.37538474967817]],[3,"Bip001 L Finger0",null,null,null,6,[-35],[1,"43XIgruKhIM6H0DXGQO5Ai",1,0],[1,0.0104071516543627,0.00811965949833393,-0.0145578002557158],[3,0.7119851590937232,0.582506349012364,-0.021799914179169717,0.39152043411851756],[1,91.45404471531172,56.66614664103358,54.33123516037301]],[11,"Bip001 L Finger01",null,null,null,17,[[30,"Bip001 L Finger0Nub",null,null,null,-36,[1,"523idgChpN5Z2SMhWnorON",1,0],[1,0.00976494792848825,-1.90734859017994e-8,9.53674295089968e-9],[1,-0.000001280660469377386,3.1805546814634477e-15,0.0000017075472925031922]]],[1,"6aWA4YJqdDN7MitZIHBYUg",1,0],[1,0.0117669673636556,-1.77635679969558e-17,-8.88178399847791e-18],[3,7.374334765405078e-9,-2.9114864573145032e-8,0.6941320154128777,0.7198477236046908],[1,0.00008041866626945415,-0.00008218055941118655,87.91618070384149]],[3,"Bip001 L Finger1",null,null,null,6,[-37],[1,"bb+ReKN6xMG57j47EGtKe4",1,0],[1,0.0274492166936398,1.90734859017994e-8,7.15255721317476e-9],[3,-0.0717021895071044,-0.004192713168595447,0.23138061089519452,0.970208343644776],[1,-8.83495553219217,1.606712063317356,26.716487136186014]],[11,"Bip001 L Finger11",null,null,null,19,[[32,"Bip001 L Finger1Nub",null,null,null,-38,[1,"64ekcNLspE7oah/h1je76M",1,0],[1,0.0161713026463985,0,0]]],[1,"87MGMJfhhP1rI+iYq4M5PW",1,0],[1,0.00906061194837093,0,-9.53674295089968e-9],[3,-1.0410782773148303e-8,1.6241691816324286e-9,0.5896596490830096,0.8076518422212023],[1,-0.0000035234845735766203,0.0000028029066950733053,72.26571917433566]],[3,"Bone004",null,null,null,7,[-39],[1,"943vZ8khdHPpAwF7XtcOur",1,0],[1,0.0182538609951735,-0.0366633608937263,0.0000851821896503679],[3,-0.5771071315413661,0.8166684509175495,1.1678396562128313e-7,1.1362093489472521e-7],[1,-0.000055235869578761776,179.9999450241842,-70.49465970040596]],[11,"Bone005",null,null,null,21,[[30,"Bone006",null,null,null,-40,[1,"d0U3d/fFxGnoZuk861WDLA",1,0],[1,0.0916164070367813,-4.76837147544984e-9,-3.55271359939116e-17],[1,-0.0000017075472940934703,8.537736494321493e-7,2.1344342428511695e-7]]],[1,"dcRcEcuPhKnI7N3uqiNbyE",1,0],[1,0.0758006572723389,9.53674295089968e-9,3.55271359939116e-17],[3,-2.7673688866335737e-17,-2.1304746616982675e-18,0.07675843914037275,0.9970497189311742],[1,-3.1805546814635136e-15,-4.019884849497632e-31,8.804529525990462]],[3,"Bone001",null,null,null,7,[-41],[1,"deE8TDVVdFpbzmVliRRjoP",1,0],[1,0.0182539355009794,0.0358551815152168,0.0000231552112381905],[3,-3.0667607123647485e-8,2.406269459493996e-7,0.8166684509175363,0.5771071315413566],[1,-179.9999264835197,179.9999437456731,70.4946597004027]],[11,"Bone002",null,null,null,23,[[30,"Bone003",null,null,null,-42,[1,"7f/YvyJqVMap39j74awdBd",1,0],[1,0.0916164219379425,-1.77635679969558e-17,-1.90734859017994e-8],[1,8.537737480293439e-7,-6.361109362926621e-15,-0.000003415094992117375]]],[1,"e87J6+MGRE1739BPWb46Bs",1,0],[1,0.0758006349205971,4.76837147544984e-9,0],[3,8.572389659312265e-9,-1.4285302302375523e-8,0.07675842717202884,0.997049719852564],[1,0.00000111825418276081,-0.0000017279083078136657,8.804528150461064]],[70,"Bone036",null,null,null,11,[[30,"Bone037",null,null,null,-43,[1,"cb8qJERLFIqp5KEKl6mwQK",1,0],[1,0.0357487015426159,-3.81469718035987e-8,1.19209286886246e-9],[1,-0.000001280660831960625,0.0000010672170450923283,0.000017075472913104722]]],[1,"44vOA28QtGGLhyINj4rXhe",1,0],[1,-0.0153351780027151,0.000575111771468073,0.00216014846228063],[3,-0.10429020824382267,0.6744823956995338,0.7265794175002394,0.07924266793142745],[1,-1,-1,-1],[1,-94.45140249452582,165.01713963298593,-1.4630139637417752]],[3,"Bip001 R Clavicle",null,null,null,5,[12],[1,"088gvzqNVJrIyVHwUJcVyz",1,0],[1,-0.0120875928550959,0.00615721708163619,-0.0116931581869721],[3,-0.5729326774711935,0.18192968308858776,0.7989430067053538,0.018433923445228546],[1,-161.5217089727678,110.39224133396661,-10.312194326189497]],[3,"Bip001 R Forearm",null,null,null,12,[13],[1,"de8B0IE3VDhK/88PV2CXA3",1,0],[1,0.055051650851965,0,0],[3,4.627818457999952e-19,1.6718548086789694e-18,-0.2667755709822321,0.9637586807531768],[1,1.1918216764580644e-16,2.3177517803726104e-16,-30.944968501144903]],[3,"Bip001 R Finger0",null,null,null,13,[-44],[1,"77YTaNDAhKe7JN+AqFYRef",1,0],[1,0.0104071516543627,0.00811965949833393,0.0145577900111675],[3,0.7762453660577475,0.5710201936358552,-0.023216957538997718,-0.26615792871259053],[1,-118.06735524579193,-37.688234661960145,64.0089240041166]],[11,"Bip001 R Finger01",null,null,null,28,[[38,"Bip001 R Finger0Nub",null,null,null,-45,[1,"66WVib6qZGlY8SA4v9aIOV",1,0],[1,0.00976493768393993,-8.88178399847791e-18,-9.53674295089968e-9],[3,-1.4901162970204496e-8,-1.1175871783564197e-8,0.9999999999999998,-2.2776583602770093e-16],[1,-1,-1,-1],[1,179.99999871933943,179.99999829245252,-7.016710363014044e-15]]],[1,"dff1Ot7vpJlr7JPTJFQ9pn",1,0],[1,0.0117669580504298,-9.53674295089968e-9,9.53674295089968e-9],[3,-1.4270028822727789e-8,1.1971259630237685e-8,0.2272718119018824,0.973831362975559],[1,-0.0000021235825134020004,0.0000019042678440892347,26.273009861417382]],[3,"Bip001 R Finger1",null,null,null,13,[-46],[1,"b1T18sxndJzqNlYHgz5XHt",1,0],[1,0.0274491924792528,3.55271359939116e-17,-1.77635679969558e-17],[3,-0.11337888446204104,0.044974067131802804,0.26157448169583625,0.9574452216024275],[1,-16.03172575313049,9.60820149720189,29.385828691128477]],[11,"Bip001 R Finger11",null,null,null,30,[[38,"Bip001 R Finger1Nub",null,null,null,-47,[1,"58aVzUPRJAg6JNTeZrtvPV",1,0],[1,0.0161713026463985,1.90734859017994e-8,4.76837147544984e-9],[3,2.2351743567128294e-8,7.450581485102248e-9,0.9999999999999998,-2.2776580955792197e-16],[1,-1,-1,-1],[1,-179.99999914622626,-179.99999743867886,-7.01670732980089e-15]]],[1,"29dR/1gMNJcKzFfQDBneSV",1,0],[1,0.00906063057482243,-1.77635679969558e-17,-9.53674295089968e-9],[3,-1.431420150773048e-17,-9.799500237256942e-18,0.564902715975743,0.8251575131350551],[1,-1.9878467470123597e-15,1.9955323324627663e-23,68.7910720130519]],[11,"Bone034",null,null,null,12,[[30,"Bone035",null,null,null,-48,[1,"1f8IMUGyxDF4GqVNJtIQX+",1,0],[1,0.035748690366745,-3.81469718035987e-8,4.76837147544984e-9],[1,8.537742569180808e-7,-0.0000025613208369770997,0.00001366037832094207]]],[1,"16IZVgiXZD05Q3TTv94EZP",1,0],[1,-0.0152791207656264,0.000579118728637695,-0.00220670690760016],[3,0.7251697927476314,0.11207805803877634,-0.0998686200007567,0.6720070976795991],[1,94.11271067382081,17.19331129101805,1.623200363856074]],[86,"Bone010",null,null,null,3,[-49],[1,"c65IRWvHlOwKL8aSdNku7K",1,0],[1,0.0411374643445015,0.0261448547244072,-0.0469603016972542],[3,0.8239252528540238,-0.002338021982640847,-0.04271105656801469,0.5650818321353865],[1,-1,-1,-1],[1,111.21360758559376,3.8894333819385167,-2.987793011844311]],[11,"Bone011",null,null,null,33,[[30,"Bone012",null,null,null,-50,[1,"6fGk/Nb7JE86vEHCmY91CU",1,0],[1,0.0205552484840155,-1.90734859017994e-8,0],[1,-2.1344346245177314e-7,0.0000017075472956837482,0.000001707547289322637]]],[1,"78UD/oTTZC66gAjRo9bodQ",1,0],[1,0.036371536552906,1.52587887214395e-7,-4.44089199923895e-18],[3,-0.03272386361747892,-0.12125723412136162,-0.11503075393539615,0.9853901550006658],[1,-5.432992586412846,-14.632538004431057,-12.636466786699307]],[3,"Bone007",null,null,null,3,[-51],[1,"2eyYYdBTtPT5LU6ZGO+d+K",1,0],[1,0.0411375425755978,0.0261447299271822,0.0476522371172905],[3,-0.002105982453361943,0.8243532560962934,0.5653290600556036,0.02898840902831019],[1,-68.84131164082963,177.12276724489638,1.679226346426385]],[11,"Bone008",null,null,null,35,[[32,"Bone009",null,null,null,-52,[1,"cdLGUjpN5F5ZNx7DurFDCL",1,0],[1,0.0205552484840155,-1.43051144263495e-8,0]]],[1,"61g8OHfIVF0609jkhREgr5",1,0],[1,0.036371573805809,1.47819520179837e-7,4.76837147544984e-9],[3,-0.03336302913742696,-0.11627139818318101,-0.10620942640729651,0.986958675930019],[1,-5.3050287900542905,-13.979308503730953,-11.647520301806278]],[3,"Bone013",null,null,null,3,[-53],[1,"4c4PurV0VE5J0CH5CgUPn/",1,0],[1,0.128006279468536,-0.0440858751535416,-3.99351094415579e-8],[3,0.7465339344424222,-0.6653473414132212,-2.6501567309989997e-7,-4.5326484861496263e-7],[1,-179.99948544882534,0.0004992724349679677,-83.4179559941205]],[3,"Bone014",null,null,null,37,[-54],[1,"88JxeRHhtEo7L2i8SPXIqF",1,0],[1,0.0254773609340191,-7.10542719878232e-17,5.9604643443123e-10],[3,0.009558563164093922,-0.018773278306787176,0.44150835476255884,0.8970097940193922],[1,3.1647354301685353,-3.953601755491472,52.34614090196158]],[3,"Bone015",null,null,null,38,[-55],[1,"c8bzHJ+2hFAabKuqhTiyzW",1,0],[1,0.0330680459737778,2.67028809730618e-7,0],[3,0.004587434843915747,-0.016105972743092622,0.2617620909087224,0.9649871298865315],[1,1.1475624782430163,-2.223486070411442,30.334427729760442]],[11,"Bone016",null,null,null,39,[[32,"Bone017",null,null,null,-56,[1,"7botn8mLtAqY1tTDZfd1WU",1,0],[1,0.050360944122076,2.38418564890708e-8,4.44089199923895e-18]]],[1,"08MN7WBilDxaaVMHLDp2kA",1,0],[1,0.0445983484387398,-1.90734859017994e-8,0],[3,-0.00018519483208176904,0.0007019976012660881,0.24774835915926283,0.9688241447425509],[1,-0.04615578877419231,0.09483454098800634,28.688597387852138]],[3,"Bip001 L Thigh",null,null,null,4,[-57],[1,"07+Avn+cBKw6BAMkkmk4DS",1,0],[1,-0.0193801298737526,-0.00792174786329269,0.0253005493432283],[3,0.14331308233556944,0.955216065232557,0.1684644248863025,-0.19657916141045378],[1,-22.743333294920696,-154.32455665540792,11.979208480088715]],[3,"Bip001 L Calf",null,null,null,41,[-58],[1,"da7gofGG5HkZTC4wreOXIr",1,0],[1,0.0852524265646935,1.19209286886246e-9,-4.76837147544984e-9],[3,8.713737534349427e-18,8.975110071514705e-18,-0.18160713219982935,0.9833711657020221],[1,1.2512282512698889e-15,1.276937817340206e-15,-20.9267694397257]],[3,"Bip001 L Foot",null,null,null,42,[-59],[1,"0dff6FUGdLzZ8la1gnHR06",1,0],[1,0.0870854929089546,-4.76837147544984e-9,-8.88178399847791e-18],[3,-0.09186316077550341,-0.11178604265155968,0.16106782495909178,0.9762797734889243],[1,-8.751622514270878,-11.551556626992117,19.574517776043002]],[11,"Bip001 L Toe0",null,null,null,43,[[38,"Bip001 L Toe0Nub",null,null,null,-60,[1,"cck3gk8TNF0bHUm2VQjGSr",1,0],[1,0.0134100401774049,-1.11022299980974e-18,8.88178399847791e-18],[3,6.51925713412993e-9,6.07153257950913e-18,1,-6.12323426292584e-17],[1,-1,-1,-1],[1,-180,-179.99999925294816,-7.016709600175252e-15]]],[1,"17y/7NwwlG+qN7PuIk9OhO",1,0],[1,0.0277349539101124,0.0302937887609005,-4.76837147544984e-9],[3,-0.025492170813628794,-0.050592519319139696,0.7613292332888525,0.6458857056445507],[1,164.63853394093493,-170.8281941896277,80.41606716990543]],[3,"Bip001 R Thigh",null,null,null,4,[-61],[1,"d6tamFjkpLO6ya7oRifjUU",1,0],[1,-0.0198341552168131,0.0217791311442852,-0.022815827280283],[3,0.35681909133035355,0.9231584023033228,0.12957571378006535,-0.06057090652568955],[1,-21.645195534130888,-164.5265701254001,40.02367186753153]],[3,"Bip001 R Calf",null,null,null,45,[-62],[1,"d5m8LTKFxOAac66eYsRUQh",1,0],[1,0.085252434015274,-4.76837147544984e-9,4.76837147544984e-9],[3,6.375524023565703e-18,-3.2419448241896936e-18,-0.2235398025163153,0.9746948018179674],[1,6.988965930360067e-16,-2.2085713896554764e-16,-25.834056298887603]],[3,"Bip001 R Foot",null,null,null,46,[-63],[1,"0dFmnZEqtA55Th/U3LdzPY",1,0],[1,0.0870855003595352,2.38418573772492e-9,0],[3,0.02997536691124248,0.06035928267334049,0.016259822561196076,0.9975940319308122],[1,3.31820740219733,6.8650401827345195,2.066533100019784]],[11,"Bip001 R Toe0",null,null,null,47,[[32,"Bip001 R Toe0Nub",null,null,null,-64,[1,"071lvZwxZD8bXDGZJWfs4B",1,0],[1,0.0134100383147597,1.49011608607807e-10,4.76837147544984e-9]]],[1,"0dyNQn+gxNF56TJiyAo5k7",1,0],[1,0.0277349520474672,0.030293783172965,0],[3,0.007997451497218587,0.010018445735700465,0.7311307922398207,0.6821168786603677],[1,-176.9084969183537,178.36921606440907,86.02430541215986]],[3,"Bone026",null,null,null,2,[-65],[1,"73S7cTjUxDBrdLLQcoojDz",1,0],[1,0.0240886304527521,0.00408209068700671,0.0400853343307972],[3,0.2706618233150323,-0.03944831603454375,0.9618442384989928,0.006455124174905528],[1,175.44685530872644,-148.58727873527968,-0.5120396190641077]],[3,"Bone027",null,null,null,49,[-66],[1,"b2q+caqi9I8rLVFHf3V09X",1,0],[1,0.0396637804806232,-2.98023217215615e-10,3.81469718035987e-8],[3,0.018787115656702998,0.07420205263432623,0.007369437659591451,0.9970390118038189],[1,2.0845869379100193,8.494261702221902,1.0017714166420786]],[11,"Bone028",null,null,null,50,[[30,"Bone029",null,null,null,-67,[1,"8bBtxbrRdCzqBoolrnCFgv",1,0],[1,0.0245457552373409,2.38418573772492e-9,0],[1,0.0000014941035119959447,0.0000017075473513434853,0.000011099057423534569]]],[1,"6eObx0OwZIMKzGJrahz2xv",1,0],[1,0.0279480833560228,-1.19209286886246e-9,-9.53674295089968e-9],[3,-0.10935427902891212,0.040012560453148834,0.03352197976935917,0.992631307956984],[1,-12.717702067885426,4.985997474090513,3.31347645437607]],[3,"Bone018",null,null,null,2,[-68],[1,"82s/2Vh3BGW6/NrpHlNDK0",1,0],[1,0.023502329364419,0.0293499100953341,-4.88758082894947e-8],[3,0.14630493326287933,0.7026693131059562,0.681420555550548,0.1432366203012722],[1,-88.2159828420685,179.88082668033962,23.629246064476334]],[3,"Bone019",null,null,null,52,[-69],[1,"5aWIJ97EVDZrXfqm9DFljx",1,0],[1,0.0404335185885429,5.9604643443123e-10,0],[3,0.0013366165795846018,0.07999474550526303,0.016056539481329613,0.9966650599311446],[1,0.005471178899228581,9.17763314608882,1.8463797363486667]],[11,"Bone020",null,null,null,53,[[32,"Bone021",null,null,null,-70,[1,"de9TbqeJhEhbAi2HKKLIzQ",1,0],[1,0.022596187889576,5.9604643443123e-10,-9.53674295089968e-9]]],[1,"08Do5FKr9B8K+6k9K62LM5",1,0],[1,0.0290823075920343,5.55111499904869e-19,-1.62124635494365e-7],[3,0.9924123545226176,0.009901002306870207,-0.12254835983849306,-0.0012602559618490352],[1,-179.9957200701034,14.079059301418095,1.1437363074404392]],[3,"Bone030",null,null,null,2,[-71],[1,"8cFhrPJDZLoZwMeZCgbKY4",1,0],[1,0.0249930750578642,-0.0320177488029003,1.19209289550781e-7],[3,0.20170812311947356,-0.6777257324326501,0.688682377446267,-0.16036909821160925],[1,91.9736979692258,-176.01228101496932,-29.623095583184117]],[3,"Bone031",null,null,null,55,[-72],[1,"a69Fz6D1FNvJnEhBvlRJa2",1,0],[1,0.0334529504179955,-1.49011608607807e-10,0],[3,0.0009400331735217041,0.1194288726903305,0.007677341787457989,0.9928126304236002],[1,0.0018772954047025826,13.718682532659683,0.8863356272128574]],[11,"Bone032",null,null,null,56,[[30,"Bone033",null,null,null,-73,[1,"6eKOweCVBI6IXmLtn5wo+H",1,0],[1,0.026835735887289,-2.98023217215615e-10,0],[1,0.000004682415031994313,-0.000004268867626356211,0.000005122641295965036]]],[1,"84Om82GNZFqYw9JkRfC8YW",1,0],[1,0.0296579729765654,-5.9604643443123e-10,0],[3,0.00004792479783835246,0.06475918054222536,0.0007008544699147011,0.9979006739359008],[1,0.0002793088253130295,7.42605378198598,0.0804990747510073]],[3,"Bone022",null,null,null,2,[-74],[1,"2139E9s15AY6lTbgAtVkKK",1,0],[1,0.0240887068212032,0.0038597893435508,-0.0400852859020233],[3,0.025910414232545993,0.966363708547948,-0.029627324415484824,0.254149670241246],[1,4.041270829948719,150.45942841122292,2.0068064191986204]],[3,"Bone023",null,null,null,58,[-75],[1,"4e+oVQ5adLmYWQk1r9tXDK",1,0],[1,0.0396552830934525,0,-9.53674295089968e-9],[3,-0.010654713291181766,0.093121337217754,0.019396348405669766,0.9954087980864876],[1,-1.4234130763293438,10.715107429308716,2.099227174285076]],[70,"Bone024",null,null,null,59,[[32,"Bone025",null,null,null,-76,[1,"afZ2YwhLNPsqamddEDFfSc",1,0],[1,0.0245457552373409,-4.44089199923895e-18,1.77635679969558e-17]]],[1,"13ijtEpvVKPaB82ZFBoqkQ",1,0],[1,0.027948159724474,2.22044599961948e-18,4.76837129781416e-8],[3,0.11041045391904174,0.055872322156112264,-0.020506568630073538,0.992102462412676],[1,1,1,0.999998986721039],[1,12.7946526963822,6.628820765399839,-1.6246365596755872]]],0,[0,7,1,0,4,1,0,-1,8,0,-1,4,0,-2,49,0,-3,52,0,-4,55,0,-5,58,0,0,3,0,-2,33,0,-3,35,0,-4,37,0,-1,10,0,-2,41,0,-3,45,0,-1,15,0,-2,26,0,-1,17,0,-2,19,0,-3,7,0,-1,21,0,-2,23,0,0,7,0,-1,14,0,-2,9,0,0,9,0,0,10,0,-1,16,0,-2,25,0,-1,27,0,-2,32,0,-1,28,0,-2,30,0,4,14,0,-1,18,0,0,18,0,-1,20,0,0,20,0,-1,22,0,0,22,0,-1,24,0,0,24,0,0,25,0,-1,29,0,0,29,0,-1,31,0,0,31,0,0,32,0,-1,34,0,0,34,0,-1,36,0,0,36,0,-1,38,0,-1,39,0,-1,40,0,0,40,0,-1,42,0,-1,43,0,-1,44,0,0,44,0,-1,46,0,-1,47,0,-1,48,0,0,48,0,-1,50,0,-1,51,0,0,51,0,-1,53,0,-1,54,0,0,54,0,-1,56,0,-1,57,0,0,57,0,-1,59,0,-1,60,0,0,60,0,9,1,2,0,9,3,0,5,5,0,10,6,0,16,11,0,15,12,0,26,13,0,27,76],[0,0,0,0,0],[-1,3,14,-1,15],[54,55,56,24,24]],[[[56,1,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[16,1]],[[[29,[{"priority":129,"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[18,1]],[[[56,1,[{"priority":120,"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,2155905152],"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[0,1]]]]
