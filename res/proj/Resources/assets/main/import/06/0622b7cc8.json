[1,["d3c7820c-2a98-4429-8bc7-b8453bc9ac41","757bd898-7bb1-42d6-b6f6-557e86d7c8cc","60f7195c-ec2a-45eb-ba94-8955f60e81d0","c27215d8-6835-4b68-bfbb-bdeac6100c04","cab6091a-cbb2-48c1-9dd1-0eceee0cda38","bc550c44-e0b5-4e61-9ac6-b8d3fd55862a","c9dc6ac0-8a2d-4767-938f-1e7f4e586072","166bffbf-6d84-498e-ad10-28cd28a6bfc3","d045b7e3-2f9c-4a34-8ce7-d3bf688e860e","1263d74c-8167-4928-91a6-4e2672411f47@a804a","1263d74c-8167-4928-91a6-4e2672411f47@8abdc","1263d74c-8167-4928-91a6-4e2672411f47@2e76e"],["node","_customMaterial","_mesh","_effectAsset","scene","_parent","_tmxFile","_skeletonData","_dragonAsset","_dragonAtlasAsset"],[["cc.Node",["_name","node","_enabled","__prefab","_id","_components","_parent","_lpos","_children","_lscale","_lrot","_euler"],-2,9,1,5,2,5,5,5],["cc.UITransform",["node","_contentSize","__prefab"],3,1,5,4],["cc.Material",["_props","_states","_defines"],0],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.SceneAsset",["_name"],2],["cc.MeshRenderer",["_name","node","__prefab","_materials","lightmapSettings","_mesh"],2,1,4,3,4,6],["cc.CompPrefabInfo",["fileId"],2],["cc.ModelLightmapSettings",[],3],["cc.RenderRoot2D",["node"],3,1],["cc.TiledMap",["_enableCulling","node","__prefab","_tmxFile"],2,1,4,6],["5cd33koVLVEppCM1HguV765",["node"],3,1],["cc.Scene",["node","_enabled","__prefab","_children","_prefab","_globals"],0,2,4,4],["cc.PrefabInfo",["fileId"],2],["cc.SceneGlobals",["ambient","shadows","_skybox","fog"],3,4,4,4,4],["cc.AmbientInfo",["_skyColor","_groundAlbedo"],3,5,5],["cc.ShadowsInfo",["_firstSetCSM","_bias","_near","_far","_saturation","_shadowColor"],-2,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["sp.Skeleton",["_preCacheMode","defaultSkin","node","_customMaterial","_skeletonData"],1,1,6,6],["dragonBones.ArmatureDisplay",["_defaultArmatureIndexValue","_armatureName","node","_customMaterial","_dragonAsset","_dragonAtlasAsset"],1,1,6,6,6],["cc.TiledLayer",["node","_customMaterial"],3,1,6],["cc.DirectionalLight",["node","_staticSettings"],3,1,4],["cc.StaticLightSettings",[],3],["cc.Camera",["_visibility","node"],2,1]],[[6,0,2],[0,0,1,2,3,6,5,7,9,5],[5,0,1,2,3,4,5,2],[7,1],[1,0,1,1],[10,0,1],[2,0,1,2,4],[3,0,1,2,4],[4,0,2],[0,0,1,2,3,4,8,5,6],[0,0,1,2,3,6,8,5,7,9,5],[0,0,1,2,3,6,5,5],[0,0,1,2,3,4,6,5,10,11,6],[0,0,1,2,3,4,6,5,7,6],[1,0,1],[1,0,2,1,1],[8,0,1],[9,0,1,2,3,2],[11,0,1,2,3,4,5,4],[12,0,2],[13,0,1,2,3,1],[14,0,1,1],[15,0,1,2,3,4,5,6],[16,1],[17,1],[18,0,1,2,3,4,3],[19,0,1,2,3,4,5,3],[20,0,1,1],[21,0,1,1],[22,1],[23,0,1,2]],[[[[6,[{}],[{"rasterizerState":{},"depthStencilState":{"depthTest":true},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}]]],0,0,[0],[3],[2]],[[[6,[{}],[{"rasterizerState":{},"depthStencilState":{"depthTest":true},"blendState":{"targets":[{}]}}],[{}]]],0,0,[0],[3],[3]],[[[7,"builtin-spine",[{"hash":2517893167,"name":"builtin-spine|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]},{"name":"a_color2","format":44,"location":3,"defines":["TWO_COLORED"]}],"varyings":[{"name":"v_light","type":16,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_dark","type":16,"count":1,"stageFlags":1,"location":2,"defines":["TWO_COLORED"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 v_light;\nlayout(location = 1) out vec2 uv0;\n#if TWO_COLORED\n  layout(location = 3) in vec4 a_color2;\n  layout(location = 2) out vec4 v_dark;\n#endif\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  pos = cc_matViewProj * pos;\n  uv0 = a_texCoord;\n  v_light = a_color;\n  #if TWO_COLORED\n    v_dark = a_color2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(location = 0) in vec4 v_light;\n#if TWO_COLORED\n  layout(location = 2) in vec4 v_dark;\n#endif\nlayout(location = 1) in vec2 uv0;\nlayout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if TWO_COLORED\n    vec4 texColor = vec4(1, 1, 1, 1);\n    texColor *= texture(cc_spriteTexture, uv0);\n     o.a = texColor.a * v_light.a;\n    o.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n    o *= texture(cc_spriteTexture, uv0);\n    o *= v_light;\n  #endif\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 v_light;\nout vec2 uv0;\n#if TWO_COLORED\n  in vec4 a_color2;\n  out vec4 v_dark;\n#endif\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  pos = cc_matViewProj * pos;\n  uv0 = a_texCoord;\n  v_light = a_color;\n  #if TWO_COLORED\n    v_dark = a_color2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_light;\n#if TWO_COLORED\n  in vec4 v_dark;\n#endif\nin vec2 uv0;\nuniform sampler2D cc_spriteTexture;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if TWO_COLORED\n    vec4 texColor = vec4(1, 1, 1, 1);\n    texColor *= texture(cc_spriteTexture, uv0);\n     o.a = texColor.a * v_light.a;\n    o.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n    o *= texture(cc_spriteTexture, uv0);\n    o *= v_light;\n  #endif\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 v_light;\nvarying vec2 uv0;\n#if TWO_COLORED\n  attribute vec4 a_color2;\n  varying vec4 v_dark;\n#endif\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  pos = cc_matViewProj * pos;\n  uv0 = a_texCoord;\n  v_light = a_color;\n  #if TWO_COLORED\n    v_dark = a_color2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_light;\n#if TWO_COLORED\n  varying vec4 v_dark;\n#endif\nvarying vec2 uv0;\nuniform sampler2D cc_spriteTexture;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if TWO_COLORED\n    vec4 texColor = vec4(1, 1, 1, 1);\n    texColor *= texture2D(cc_spriteTexture, uv0);\n     o.a = texColor.a * v_light.a;\n    o.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n  #else\n    o *= texture2D(cc_spriteTexture, uv0);\n    o *= v_light;\n  #endif\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":[]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":48,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":1}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"TWO_COLORED","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}]}],[{"passes":[{"program":"builtin-spine|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[8,"2d-rendering-in-3d"],[9,"Plane",null,null,null,"7bMmo/szBO/pq50BBQ+VZn",[-4,-5,-6,-7,-8],[[2,"Plane<ModelComponent>",-1,[0,"e0uHCYkZ1D1I9glcT6oLf2"],[11],[3],12],[14,-2],[16,-3]]],[10,"TiledMap",null,null,null,1,[-12],[[15,-9,[0,"a2UFag3ptKgoD5Gu9Hc2u7"],[5,1000,500]],[17,false,-10,[0,"c9daWXSp1NHY7B0DcUp3vj"],1],[5,-11]],[1,2.908,1,-1],[1,0.003,0.003,0.003]],[18,null,null,null,[-13,-14,1],[19,"d3fc11bc-05dc-4e60-bc4f-f682fa74e8b6"],[20,[21,[4,4278190080],[4,4278190080]],[22,true,0.1,1,30,1,[4,4283190348]],[23],[24]]],[1,"Spine",null,null,null,1,[[4,-15,[5,419.84,686.08]],[25,0,"default",-16,2,3],[5,-17]],[1,-5,0,0],[1,0.005,0.005,0.005]],[1,"Dragonbones",null,null,null,1,[[4,-18,[5,518.55,671.47]],[26,0,"Swordsman",-19,4,5,6],[5,-20]],[1,-1.107,0,-1],[1,0.008,0.005,0.01]],[11,"baseLayer",null,null,null,2,[[4,-21,[5,1000,500]],[27,-22,0]]],[12,"Main Light",null,null,null,"c0y6F5f+pAvI805TdmxIjx",3,[[28,-23,[29]]],[3,-0.24999999999999997,-0.24999999999999997,-0.06698729810778066,0.9330127018922194],[1,-30,-30,0]],[13,"Main Camera",null,null,null,"c9DMICJLFO5IeO07EPon7U",3,[[30,1822425087,-24]],[1,0.012,1.474,10]],[1,"Cube001",null,null,null,1,[[2,"Cube<ModelComponent>",-25,[0,"e8DOT5UJ1F/ZgplWYyCxRs"],[7],[3],8]],[1,-1.731,1,4.5],[1,1,2,1]],[1,"Cylinder001",null,null,null,1,[[2,"Cylinder<ModelComponent>",-26,[0,"b8R46AvAVAcJdQNHs3AvR2"],[9],[3],10]],[1,2,2,-2.219],[1,1,4,1]]],0,[0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,4,0,-3,5,0,-4,9,0,-5,10,0,0,2,0,0,2,0,0,2,0,-1,6,0,-1,7,0,-2,8,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,8,0,0,9,0,0,10,0,4,3,1,5,3,26],[0,0,0,0,0,0,0,0,0,0,0,0,0],[1,6,1,7,1,8,9,-1,2,-1,2,-1,2],[1,4,5,6,1,7,8,0,9,0,10,0,11]]]]
